
AlphaController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004c6  00800100  00000b00  00000b94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000043  008005c6  008005c6  0000105a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000105a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000108c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e17  00000000  00000000  00001184  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000080f  00000000  00000000  00001f9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000630  00000000  00000000  000027aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  00002ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058e  00000000  00000000  00002fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002c5  00000000  00000000  0000354e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003813  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_1>
   8:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
   c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  10:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  14:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  18:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  1c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  20:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  24:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  28:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  2c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  30:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  34:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  38:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  3c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  40:	0c 94 91 00 	jmp	0x122	; 0x122 <__vector_16>
  44:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  48:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  4c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  50:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_20>
  54:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  58:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  5c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  60:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  68:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  6c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  70:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  74:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  78:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  7c:	cc 01       	movw	r24, r24
  7e:	d7 01       	movw	r26, r14
  80:	e2 01       	movw	r28, r4
  82:	9a 02       	muls	r25, r26
  84:	d8 02       	muls	r29, r24
  86:	16 03       	mulsu	r17, r22
  88:	7b 03       	fmul	r23, r19

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d0 e1       	ldi	r29, 0x10	; 16
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61

00000096 <__do_copy_data>:
  96:	15 e0       	ldi	r17, 0x05	; 5
  98:	a0 e0       	ldi	r26, 0x00	; 0
  9a:	b1 e0       	ldi	r27, 0x01	; 1
  9c:	e0 e0       	ldi	r30, 0x00	; 0
  9e:	fb e0       	ldi	r31, 0x0B	; 11
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <__do_copy_data+0x10>
  a2:	05 90       	lpm	r0, Z+
  a4:	0d 92       	st	X+, r0
  a6:	a6 3c       	cpi	r26, 0xC6	; 198
  a8:	b1 07       	cpc	r27, r17
  aa:	d9 f7       	brne	.-10     	; 0xa2 <__do_copy_data+0xc>

000000ac <__do_clear_bss>:
  ac:	26 e0       	ldi	r18, 0x06	; 6
  ae:	a6 ec       	ldi	r26, 0xC6	; 198
  b0:	b5 e0       	ldi	r27, 0x05	; 5
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
  b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
  b6:	a9 30       	cpi	r26, 0x09	; 9
  b8:	b2 07       	cpc	r27, r18
  ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
  bc:	0e 94 1d 01 	call	0x23a	; 0x23a <main>
  c0:	0c 94 7e 05 	jmp	0xafc	; 0xafc <_exit>

000000c4 <__bad_interrupt>:
  c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c8 <__vector_1>:
        NextChar = uart_getc();
    }
    // Noch ein '\0' anh?ngen um einen Standard
    // C-String daraus zu machen
    *Buffer = '\0';
}
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
  d6:	10 92 cd 05 	sts	0x05CD, r1	; 0x8005cd <timerCounter+0x1>
  da:	10 92 cc 05 	sts	0x05CC, r1	; 0x8005cc <timerCounter>
  de:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <intCounter>
  e2:	90 91 cf 05 	lds	r25, 0x05CF	; 0x8005cf <intCounter+0x1>
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	90 93 cf 05 	sts	0x05CF, r25	; 0x8005cf <intCounter+0x1>
  ec:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <intCounter>
  f0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <intCounterPhaseA>
  f4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <intCounterPhaseA+0x1>
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <intCounterPhaseA+0x1>
  fe:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <intCounterPhaseA>
 102:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 106:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 10a:	01 96       	adiw	r24, 0x01	; 1
 10c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 110:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 114:	9f 91       	pop	r25
 116:	8f 91       	pop	r24
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <__vector_16>:
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	8f 93       	push	r24
 12e:	9f 93       	push	r25
 130:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <timerCounter>
 134:	90 91 cd 05 	lds	r25, 0x05CD	; 0x8005cd <timerCounter+0x1>
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	90 93 cd 05 	sts	0x05CD, r25	; 0x8005cd <timerCounter+0x1>
 13e:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <timerCounter>
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <uart_getc>:
 150:	e0 ec       	ldi	r30, 0xC0	; 192
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	88 23       	and	r24, r24
 158:	ec f7       	brge	.-6      	; 0x154 <uart_getc+0x4>
 15a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 15e:	08 95       	ret

00000160 <__vector_20>:
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	2f 93       	push	r18
 16c:	3f 93       	push	r19
 16e:	4f 93       	push	r20
 170:	5f 93       	push	r21
 172:	6f 93       	push	r22
 174:	7f 93       	push	r23
 176:	8f 93       	push	r24
 178:	9f 93       	push	r25
 17a:	af 93       	push	r26
 17c:	bf 93       	push	r27
 17e:	ef 93       	push	r30
 180:	ff 93       	push	r31
 182:	0e 94 a8 00 	call	0x150	; 0x150 <uart_getc>
 186:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <uartBuffer>
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	90 93 c9 05 	sts	0x05C9, r25	; 0x8005c9 <uartFlag+0x1>
 192:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <uartFlag>
 196:	ff 91       	pop	r31
 198:	ef 91       	pop	r30
 19a:	bf 91       	pop	r27
 19c:	af 91       	pop	r26
 19e:	9f 91       	pop	r25
 1a0:	8f 91       	pop	r24
 1a2:	7f 91       	pop	r23
 1a4:	6f 91       	pop	r22
 1a6:	5f 91       	pop	r21
 1a8:	4f 91       	pop	r20
 1aa:	3f 91       	pop	r19
 1ac:	2f 91       	pop	r18
 1ae:	0f 90       	pop	r0
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	0f 90       	pop	r0
 1b4:	1f 90       	pop	r1
 1b6:	18 95       	reti

000001b8 <uart_sendc>:
void uart_sendc(char c) {
    while (!(UCSR0A & (1<<UDRE0))) { /* warten bis Senden moeglich */
 1b8:	e0 ec       	ldi	r30, 0xC0	; 192
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	90 81       	ld	r25, Z
 1be:	95 ff       	sbrs	r25, 5
 1c0:	fd cf       	rjmp	.-6      	; 0x1bc <uart_sendc+0x4>
    }
    UDR0 = c;                      /* sende Zeichen */
 1c2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1c6:	08 95       	ret

000001c8 <SSR1on>:
}
/* puts ist unabhaengig vom Controllertyp */
void SSR1on () {
    PORTB |= (1<<PB0);		//set PB0 HIGH
 1c8:	28 9a       	sbi	0x05, 0	; 5
 1ca:	08 95       	ret

000001cc <SSR1off>:
}
void SSR1off () {
    PORTB &= ~(1<<PB0);		//clear PB0 aka.  set PB0 LOW
 1cc:	28 98       	cbi	0x05, 0	; 5
 1ce:	08 95       	ret

000001d0 <SSR2on>:
}
void SSR2on () {
    PORTB |= (1<<PB1);		//set PB0 HIGH
 1d0:	29 9a       	sbi	0x05, 1	; 5
 1d2:	08 95       	ret

000001d4 <SSR2off>:
}
void SSR2off () {
    PORTB &= ~(1<<PB1);		//clear PB0 aka.  set PB0 LOW
 1d4:	29 98       	cbi	0x05, 1	; 5
 1d6:	08 95       	ret

000001d8 <SSR3Aon>:
}
void SSR3Aon () {
    PORTB |= (1<<PB2);		//set PB0 HIGH
 1d8:	2a 9a       	sbi	0x05, 2	; 5
 1da:	08 95       	ret

000001dc <SSR3Aoff>:
}
void SSR3Aoff () {
    PORTB &= ~(1<<PB2);		//clear PB0 aka.  set PB0 LOW
 1dc:	2a 98       	cbi	0x05, 2	; 5
 1de:	08 95       	ret

000001e0 <SSR3Bon>:
}
void SSR3Bon () {
    PORTB |= (1<<PB3);		//set PB0 HIGH
 1e0:	2b 9a       	sbi	0x05, 3	; 5
 1e2:	08 95       	ret

000001e4 <SSR3Boff>:
}
void SSR3Boff () {
    PORTB &= ~(1<<PB3);		//clear PB0 aka.  set PB0 LOW
 1e4:	2b 98       	cbi	0x05, 3	; 5
 1e6:	08 95       	ret

000001e8 <SSR3Con>:
}
void SSR3Con () {
    PORTB |= (1<<PB4);		//set PB0 HIGH
 1e8:	2c 9a       	sbi	0x05, 4	; 5
 1ea:	08 95       	ret

000001ec <SSR3Coff>:
}
void SSR3Coff () {
    PORTB &= ~(1<<PB4);		//clear PB0 aka.  set PB0 LOW
 1ec:	2c 98       	cbi	0x05, 4	; 5
 1ee:	08 95       	ret

000001f0 <Init_Int0>:
}
void Init_Int0() {
    EIMSK |= (1<<0);
 1f0:	e8 9a       	sbi	0x1d, 0	; 29
    EICRA |= (1<<ISC00);
 1f2:	e9 e6       	ldi	r30, 0x69	; 105
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	81 60       	ori	r24, 0x01	; 1
 1fa:	80 83       	st	Z, r24
 1fc:	08 95       	ret

000001fe <Init_Timer_0>:
}
void Init_Timer_0() {
    TCCR0A = (1<<WGM01);	//ctc mode
 1fe:	82 e0       	ldi	r24, 0x02	; 2
 200:	84 bd       	out	0x24, r24	; 36
    TCCR0B |= (1<<CS01);	//prescaler 8
 202:	85 b5       	in	r24, 0x25	; 37
 204:	82 60       	ori	r24, 0x02	; 2
 206:	85 bd       	out	0x25, r24	; 37
    OCR0A = 0x63;			//fill OCR0A with 99 for 50us angle steps
 208:	83 e6       	ldi	r24, 0x63	; 99
 20a:	87 bd       	out	0x27, r24	; 39
    TIMSK0 |= (1<<1);		//enable compare interrupt
 20c:	ee e6       	ldi	r30, 0x6E	; 110
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	82 60       	ori	r24, 0x02	; 2
 214:	80 83       	st	Z, r24
 216:	08 95       	ret

00000218 <USART_Init>:
}
void USART_Init() {
    /* Set baud rate */
    UBRR0 = 25;
 218:	89 e1       	ldi	r24, 0x19	; 25
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 220:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    /* Enable receiver and transmitter */
    UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
 224:	88 e9       	ldi	r24, 0x98	; 152
 226:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    /* Set frame format: 8data, 1stop bit */
    UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
 22a:	e2 ec       	ldi	r30, 0xC2	; 194
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	86 e0       	ldi	r24, 0x06	; 6
 230:	80 83       	st	Z, r24
    UCSR0C &= ~(1<<USBS0);
 232:	80 81       	ld	r24, Z
 234:	87 7f       	andi	r24, 0xF7	; 247
 236:	80 83       	st	Z, r24
 238:	08 95       	ret

0000023a <main>:
void getAdcVals();
void calcBurstVals();
void uart_sendc(char c);

int main(void) {
    Init_Int0();
 23a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Init_Int0>
    Init_Timer_0();
 23e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <Init_Timer_0>
    USART_Init();
 242:	0e 94 0c 01 	call	0x218	; 0x218 <USART_Init>
    sei();
 246:	78 94       	sei
    DDRB = 0xFF;
 248:	8f ef       	ldi	r24, 0xFF	; 255
 24a:	84 b9       	out	0x04, r24	; 4
    while(1) {
        if (intCounter == 200) {
 24c:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <intCounter>
 250:	90 91 cf 05 	lds	r25, 0x05CF	; 0x8005cf <intCounter+0x1>
 254:	88 3c       	cpi	r24, 0xC8	; 200
 256:	91 05       	cpc	r25, r1
 258:	39 f4       	brne	.+14     	; 0x268 <main+0x2e>
            intCounter = 0;
 25a:	10 92 cf 05 	sts	0x05CF, r1	; 0x8005cf <intCounter+0x1>
 25e:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <intCounter>
            uart_sendc('r'); //Request Control Values
 262:	82 e7       	ldi	r24, 0x72	; 114
 264:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <uart_sendc>
        }
        if (intCounterPhaseA == 200) {
 268:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <intCounterPhaseA>
 26c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <intCounterPhaseA+0x1>
 270:	88 3c       	cpi	r24, 0xC8	; 200
 272:	91 05       	cpc	r25, r1
 274:	21 f4       	brne	.+8      	; 0x27e <main+0x44>
            intCounterPhaseA = 0;
 276:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <intCounterPhaseA+0x1>
 27a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <intCounterPhaseA>
        }
        if (intCounterPhaseB == 200) {
 27e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 282:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 286:	88 3c       	cpi	r24, 0xC8	; 200
 288:	91 05       	cpc	r25, r1
 28a:	21 f4       	brne	.+8      	; 0x294 <main+0x5a>
            intCounterPhaseB = 0;
 28c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 290:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
        }
        if(uartFlag == 1 && uartBuffer != '#') {
 294:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <uartFlag>
 298:	90 91 c9 05 	lds	r25, 0x05C9	; 0x8005c9 <uartFlag+0x1>
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	d9 f4       	brne	.+54     	; 0x2d6 <main+0x9c>
 2a0:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <uartBuffer>
 2a4:	83 32       	cpi	r24, 0x23	; 35
 2a6:	b9 f0       	breq	.+46     	; 0x2d6 <main+0x9c>
            input[bufferIdx] = uartBuffer;
 2a8:	e0 91 ca 05 	lds	r30, 0x05CA	; 0x8005ca <bufferIdx>
 2ac:	f0 91 cb 05 	lds	r31, 0x05CB	; 0x8005cb <bufferIdx+0x1>
 2b0:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <uartBuffer>
 2b4:	ea 52       	subi	r30, 0x2A	; 42
 2b6:	fa 4f       	sbci	r31, 0xFA	; 250
 2b8:	80 83       	st	Z, r24
            bufferIdx++;
 2ba:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <bufferIdx>
 2be:	90 91 cb 05 	lds	r25, 0x05CB	; 0x8005cb <bufferIdx+0x1>
 2c2:	01 96       	adiw	r24, 0x01	; 1
 2c4:	90 93 cb 05 	sts	0x05CB, r25	; 0x8005cb <bufferIdx+0x1>
 2c8:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <bufferIdx>
            uartFlag = 0;
 2cc:	10 92 c9 05 	sts	0x05C9, r1	; 0x8005c9 <uartFlag+0x1>
 2d0:	10 92 c8 05 	sts	0x05C8, r1	; 0x8005c8 <uartFlag>
 2d4:	54 c0       	rjmp	.+168    	; 0x37e <main+0x144>
        } else if (uartFlag == 1 && uartBuffer == '#') {
 2d6:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <uartFlag>
 2da:	90 91 c9 05 	lds	r25, 0x05C9	; 0x8005c9 <uartFlag+0x1>
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	09 f0       	breq	.+2      	; 0x2e4 <main+0xaa>
 2e2:	4d c0       	rjmp	.+154    	; 0x37e <main+0x144>
 2e4:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <uartBuffer>
 2e8:	83 32       	cpi	r24, 0x23	; 35
 2ea:	09 f0       	breq	.+2      	; 0x2ee <main+0xb4>
 2ec:	48 c0       	rjmp	.+144    	; 0x37e <main+0x144>
            bufferIdx++;
 2ee:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <bufferIdx>
 2f2:	90 91 cb 05 	lds	r25, 0x05CB	; 0x8005cb <bufferIdx+0x1>
 2f6:	01 96       	adiw	r24, 0x01	; 1
 2f8:	90 93 cb 05 	sts	0x05CB, r25	; 0x8005cb <bufferIdx+0x1>
 2fc:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <bufferIdx>
            input[bufferIdx] = '\0';
 300:	e0 91 ca 05 	lds	r30, 0x05CA	; 0x8005ca <bufferIdx>
 304:	f0 91 cb 05 	lds	r31, 0x05CB	; 0x8005cb <bufferIdx+0x1>
 308:	ea 52       	subi	r30, 0x2A	; 42
 30a:	fa 4f       	sbci	r31, 0xFA	; 250
 30c:	10 82       	st	Z, r1
            char* token = strtok(input, "-");
 30e:	64 ec       	ldi	r22, 0xC4	; 196
 310:	75 e0       	ldi	r23, 0x05	; 5
 312:	86 ed       	ldi	r24, 0xD6	; 214
 314:	95 e0       	ldi	r25, 0x05	; 5
 316:	0e 94 4a 05 	call	0xa94	; 0xa94 <strtok>
            mode = atoi(token);
 31a:	0e 94 2c 05 	call	0xa58	; 0xa58 <atoi>
 31e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <mode+0x1>
 322:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <mode>
            token = strtok(0, "-");
 326:	64 ec       	ldi	r22, 0xC4	; 196
 328:	75 e0       	ldi	r23, 0x05	; 5
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	0e 94 4a 05 	call	0xa94	; 0xa94 <strtok>
            ctrlVal1 = atoi(token);
 332:	0e 94 2c 05 	call	0xa58	; 0xa58 <atoi>
 336:	90 93 d5 05 	sts	0x05D5, r25	; 0x8005d5 <ctrlVal1+0x1>
 33a:	80 93 d4 05 	sts	0x05D4, r24	; 0x8005d4 <ctrlVal1>
            token = strtok(0, "-");
 33e:	64 ec       	ldi	r22, 0xC4	; 196
 340:	75 e0       	ldi	r23, 0x05	; 5
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 4a 05 	call	0xa94	; 0xa94 <strtok>
            ctrlVal2 = atoi(token);
 34a:	0e 94 2c 05 	call	0xa58	; 0xa58 <atoi>
 34e:	90 93 d3 05 	sts	0x05D3, r25	; 0x8005d3 <ctrlVal2+0x1>
 352:	80 93 d2 05 	sts	0x05D2, r24	; 0x8005d2 <ctrlVal2>
            token = strtok(0, "-");
 356:	64 ec       	ldi	r22, 0xC4	; 196
 358:	75 e0       	ldi	r23, 0x05	; 5
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 4a 05 	call	0xa94	; 0xa94 <strtok>
            ctrlVal3 = atoi(token);
 362:	0e 94 2c 05 	call	0xa58	; 0xa58 <atoi>
 366:	90 93 d1 05 	sts	0x05D1, r25	; 0x8005d1 <ctrlVal3+0x1>
 36a:	80 93 d0 05 	sts	0x05D0, r24	; 0x8005d0 <ctrlVal3>
            bufferIdx = 0;
 36e:	10 92 cb 05 	sts	0x05CB, r1	; 0x8005cb <bufferIdx+0x1>
 372:	10 92 ca 05 	sts	0x05CA, r1	; 0x8005ca <bufferIdx>
            uartFlag = 0;
 376:	10 92 c9 05 	sts	0x05C9, r1	; 0x8005c9 <uartFlag+0x1>
 37a:	10 92 c8 05 	sts	0x05C8, r1	; 0x8005c8 <uartFlag>
        }
        switch(mode) {
 37e:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <mode>
 382:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <mode+0x1>
 386:	31 97       	sbiw	r30, 0x01	; 1
 388:	e7 30       	cpi	r30, 0x07	; 7
 38a:	f1 05       	cpc	r31, r1
 38c:	08 f0       	brcs	.+2      	; 0x390 <main+0x156>
 38e:	5e cf       	rjmp	.-324    	; 0x24c <main+0x12>
 390:	e2 5c       	subi	r30, 0xC2	; 194
 392:	ff 4f       	sbci	r31, 0xFF	; 255
 394:	0c 94 26 05 	jmp	0xa4c	; 0xa4c <__tablejump2__>
        case 1: //permanent LOW	//WORKING
            SSR1off();
 398:	0e 94 e6 00 	call	0x1cc	; 0x1cc <SSR1off>
            SSR2off();
 39c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <SSR2off>
            SSR3Aoff();
 3a0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <SSR3Aoff>
            SSR3Boff();
 3a4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <SSR3Boff>
            SSR3Coff();
 3a8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SSR3Coff>
            break;
 3ac:	4f cf       	rjmp	.-354    	; 0x24c <main+0x12>
        case 2: //permanent HIGH //WORKING
            SSR1on();
 3ae:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <SSR1on>
            SSR2on();
 3b2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <SSR2on>
            SSR3Aon();
 3b6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <SSR3Aon>
            SSR3Bon();
 3ba:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SSR3Bon>
            SSR3Con();
 3be:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <SSR3Con>
            break;
 3c2:	44 cf       	rjmp	.-376    	; 0x24c <main+0x12>
        case 3: //uncorrected phase angle //WORKING
            if(timerCounter+1 > (fireAngleTable[ctrlVal1]*netzT)/50) {
 3c4:	60 91 cc 05 	lds	r22, 0x05CC	; 0x8005cc <timerCounter>
 3c8:	70 91 cd 05 	lds	r23, 0x05CD	; 0x8005cd <timerCounter+0x1>
 3cc:	e0 91 d4 05 	lds	r30, 0x05D4	; 0x8005d4 <ctrlVal1>
 3d0:	f0 91 d5 05 	lds	r31, 0x05D5	; 0x8005d5 <ctrlVal1+0x1>
 3d4:	ee 0f       	add	r30, r30
 3d6:	ff 1f       	adc	r31, r31
 3d8:	ee 0f       	add	r30, r30
 3da:	ff 1f       	adc	r31, r31
 3dc:	e0 5d       	subi	r30, 0xD0	; 208
 3de:	fb 4f       	sbci	r31, 0xFB	; 251
 3e0:	c0 80       	ld	r12, Z
 3e2:	d1 80       	ldd	r13, Z+1	; 0x01
 3e4:	e2 80       	ldd	r14, Z+2	; 0x02
 3e6:	f3 80       	ldd	r15, Z+3	; 0x03
 3e8:	6f 5f       	subi	r22, 0xFF	; 255
 3ea:	7f 4f       	sbci	r23, 0xFF	; 255
 3ec:	07 2e       	mov	r0, r23
 3ee:	00 0c       	add	r0, r0
 3f0:	88 0b       	sbc	r24, r24
 3f2:	99 0b       	sbc	r25, r25
 3f4:	0e 94 04 04 	call	0x808	; 0x808 <__floatsisf>
 3f8:	4b 01       	movw	r8, r22
 3fa:	5c 01       	movw	r10, r24
 3fc:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <netzT>
 400:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <netzT+0x1>
 404:	07 2e       	mov	r0, r23
 406:	00 0c       	add	r0, r0
 408:	88 0b       	sbc	r24, r24
 40a:	99 0b       	sbc	r25, r25
 40c:	0e 94 04 04 	call	0x808	; 0x808 <__floatsisf>
 410:	a7 01       	movw	r20, r14
 412:	96 01       	movw	r18, r12
 414:	0e 94 95 04 	call	0x92a	; 0x92a <__mulsf3>
 418:	20 e0       	ldi	r18, 0x00	; 0
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	48 e4       	ldi	r20, 0x48	; 72
 41e:	52 e4       	ldi	r21, 0x42	; 66
 420:	0e 94 90 03 	call	0x720	; 0x720 <__divsf3>
 424:	9b 01       	movw	r18, r22
 426:	ac 01       	movw	r20, r24
 428:	c5 01       	movw	r24, r10
 42a:	b4 01       	movw	r22, r8
 42c:	0e 94 90 04 	call	0x920	; 0x920 <__gesf2>
 430:	18 16       	cp	r1, r24
 432:	1c f4       	brge	.+6      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
                SSR1on();
 434:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <SSR1on>
 438:	02 c0       	rjmp	.+4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
            } else {
                SSR1off();
 43a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <SSR1off>
            }
            if(timerCounter+1 > (fireAngleTable[ctrlVal2]*netzT)/50) {
 43e:	60 91 cc 05 	lds	r22, 0x05CC	; 0x8005cc <timerCounter>
 442:	70 91 cd 05 	lds	r23, 0x05CD	; 0x8005cd <timerCounter+0x1>
 446:	e0 91 d2 05 	lds	r30, 0x05D2	; 0x8005d2 <ctrlVal2>
 44a:	f0 91 d3 05 	lds	r31, 0x05D3	; 0x8005d3 <ctrlVal2+0x1>
 44e:	ee 0f       	add	r30, r30
 450:	ff 1f       	adc	r31, r31
 452:	ee 0f       	add	r30, r30
 454:	ff 1f       	adc	r31, r31
 456:	e0 5d       	subi	r30, 0xD0	; 208
 458:	fb 4f       	sbci	r31, 0xFB	; 251
 45a:	c0 80       	ld	r12, Z
 45c:	d1 80       	ldd	r13, Z+1	; 0x01
 45e:	e2 80       	ldd	r14, Z+2	; 0x02
 460:	f3 80       	ldd	r15, Z+3	; 0x03
 462:	6f 5f       	subi	r22, 0xFF	; 255
 464:	7f 4f       	sbci	r23, 0xFF	; 255
 466:	07 2e       	mov	r0, r23
 468:	00 0c       	add	r0, r0
 46a:	88 0b       	sbc	r24, r24
 46c:	99 0b       	sbc	r25, r25
 46e:	0e 94 04 04 	call	0x808	; 0x808 <__floatsisf>
 472:	4b 01       	movw	r8, r22
 474:	5c 01       	movw	r10, r24
 476:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <netzT>
 47a:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <netzT+0x1>
 47e:	07 2e       	mov	r0, r23
 480:	00 0c       	add	r0, r0
 482:	88 0b       	sbc	r24, r24
 484:	99 0b       	sbc	r25, r25
 486:	0e 94 04 04 	call	0x808	; 0x808 <__floatsisf>
 48a:	a7 01       	movw	r20, r14
 48c:	96 01       	movw	r18, r12
 48e:	0e 94 95 04 	call	0x92a	; 0x92a <__mulsf3>
 492:	20 e0       	ldi	r18, 0x00	; 0
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	48 e4       	ldi	r20, 0x48	; 72
 498:	52 e4       	ldi	r21, 0x42	; 66
 49a:	0e 94 90 03 	call	0x720	; 0x720 <__divsf3>
 49e:	9b 01       	movw	r18, r22
 4a0:	ac 01       	movw	r20, r24
 4a2:	c5 01       	movw	r24, r10
 4a4:	b4 01       	movw	r22, r8
 4a6:	0e 94 90 04 	call	0x920	; 0x920 <__gesf2>
 4aa:	18 16       	cp	r1, r24
 4ac:	1c f4       	brge	.+6      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
                SSR2on();
 4ae:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <SSR2on>
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
            } else {
                SSR2off();
 4b4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <SSR2off>
            }
            if(timerCounter+1 > (fireAngleTable[ctrlVal3]*netzT)/50) {
 4b8:	60 91 cc 05 	lds	r22, 0x05CC	; 0x8005cc <timerCounter>
 4bc:	70 91 cd 05 	lds	r23, 0x05CD	; 0x8005cd <timerCounter+0x1>
 4c0:	e0 91 d0 05 	lds	r30, 0x05D0	; 0x8005d0 <ctrlVal3>
 4c4:	f0 91 d1 05 	lds	r31, 0x05D1	; 0x8005d1 <ctrlVal3+0x1>
 4c8:	ee 0f       	add	r30, r30
 4ca:	ff 1f       	adc	r31, r31
 4cc:	ee 0f       	add	r30, r30
 4ce:	ff 1f       	adc	r31, r31
 4d0:	e0 5d       	subi	r30, 0xD0	; 208
 4d2:	fb 4f       	sbci	r31, 0xFB	; 251
 4d4:	c0 80       	ld	r12, Z
 4d6:	d1 80       	ldd	r13, Z+1	; 0x01
 4d8:	e2 80       	ldd	r14, Z+2	; 0x02
 4da:	f3 80       	ldd	r15, Z+3	; 0x03
 4dc:	6f 5f       	subi	r22, 0xFF	; 255
 4de:	7f 4f       	sbci	r23, 0xFF	; 255
 4e0:	07 2e       	mov	r0, r23
 4e2:	00 0c       	add	r0, r0
 4e4:	88 0b       	sbc	r24, r24
 4e6:	99 0b       	sbc	r25, r25
 4e8:	0e 94 04 04 	call	0x808	; 0x808 <__floatsisf>
 4ec:	4b 01       	movw	r8, r22
 4ee:	5c 01       	movw	r10, r24
 4f0:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <netzT>
 4f4:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <netzT+0x1>
 4f8:	07 2e       	mov	r0, r23
 4fa:	00 0c       	add	r0, r0
 4fc:	88 0b       	sbc	r24, r24
 4fe:	99 0b       	sbc	r25, r25
 500:	0e 94 04 04 	call	0x808	; 0x808 <__floatsisf>
 504:	a7 01       	movw	r20, r14
 506:	96 01       	movw	r18, r12
 508:	0e 94 95 04 	call	0x92a	; 0x92a <__mulsf3>
 50c:	20 e0       	ldi	r18, 0x00	; 0
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	48 e4       	ldi	r20, 0x48	; 72
 512:	52 e4       	ldi	r21, 0x42	; 66
 514:	0e 94 90 03 	call	0x720	; 0x720 <__divsf3>
 518:	9b 01       	movw	r18, r22
 51a:	ac 01       	movw	r20, r24
 51c:	c5 01       	movw	r24, r10
 51e:	b4 01       	movw	r22, r8
 520:	0e 94 90 04 	call	0x920	; 0x920 <__gesf2>
 524:	18 16       	cp	r1, r24
 526:	1c f4       	brge	.+6      	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
                SSR3Aon();
 528:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <SSR3Aon>
 52c:	8f ce       	rjmp	.-738    	; 0x24c <main+0x12>
            } else {
                SSR3Aoff();
 52e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <SSR3Aoff>
 532:	8c ce       	rjmp	.-744    	; 0x24c <main+0x12>
            }
            break;
        case 4: //phase angle power	//WORKING
            if(timerCounter+1 > (fireAngleTableP[ctrlVal1]*netzT)/50) {
 534:	60 91 cc 05 	lds	r22, 0x05CC	; 0x8005cc <timerCounter>
 538:	70 91 cd 05 	lds	r23, 0x05CD	; 0x8005cd <timerCounter+0x1>
 53c:	e0 91 d4 05 	lds	r30, 0x05D4	; 0x8005d4 <ctrlVal1>
 540:	f0 91 d5 05 	lds	r31, 0x05D5	; 0x8005d5 <ctrlVal1+0x1>
 544:	ee 0f       	add	r30, r30
 546:	ff 1f       	adc	r31, r31
 548:	ee 0f       	add	r30, r30
 54a:	ff 1f       	adc	r31, r31
 54c:	e8 5f       	subi	r30, 0xF8	; 248
 54e:	fe 4f       	sbci	r31, 0xFE	; 254
 550:	c0 80       	ld	r12, Z
 552:	d1 80       	ldd	r13, Z+1	; 0x01
 554:	e2 80       	ldd	r14, Z+2	; 0x02
 556:	f3 80       	ldd	r15, Z+3	; 0x03
 558:	6f 5f       	subi	r22, 0xFF	; 255
 55a:	7f 4f       	sbci	r23, 0xFF	; 255
 55c:	07 2e       	mov	r0, r23
 55e:	00 0c       	add	r0, r0
 560:	88 0b       	sbc	r24, r24
 562:	99 0b       	sbc	r25, r25
 564:	0e 94 04 04 	call	0x808	; 0x808 <__floatsisf>
 568:	4b 01       	movw	r8, r22
 56a:	5c 01       	movw	r10, r24
 56c:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <netzT>
 570:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <netzT+0x1>
 574:	07 2e       	mov	r0, r23
 576:	00 0c       	add	r0, r0
 578:	88 0b       	sbc	r24, r24
 57a:	99 0b       	sbc	r25, r25
 57c:	0e 94 04 04 	call	0x808	; 0x808 <__floatsisf>
 580:	a7 01       	movw	r20, r14
 582:	96 01       	movw	r18, r12
 584:	0e 94 95 04 	call	0x92a	; 0x92a <__mulsf3>
 588:	20 e0       	ldi	r18, 0x00	; 0
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	48 e4       	ldi	r20, 0x48	; 72
 58e:	52 e4       	ldi	r21, 0x42	; 66
 590:	0e 94 90 03 	call	0x720	; 0x720 <__divsf3>
 594:	9b 01       	movw	r18, r22
 596:	ac 01       	movw	r20, r24
 598:	c5 01       	movw	r24, r10
 59a:	b4 01       	movw	r22, r8
 59c:	0e 94 90 04 	call	0x920	; 0x920 <__gesf2>
 5a0:	18 16       	cp	r1, r24
 5a2:	1c f4       	brge	.+6      	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
                SSR1on();
 5a4:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <SSR1on>
 5a8:	51 ce       	rjmp	.-862    	; 0x24c <main+0x12>
            } else {
                SSR1off();
 5aa:	0e 94 e6 00 	call	0x1cc	; 0x1cc <SSR1off>
 5ae:	4e ce       	rjmp	.-868    	; 0x24c <main+0x12>
            }
            break;
        case 5: //phase angle effective voltage //WORKING
            if(timerCounter+1 > (fireAngleTableV[ctrlVal1]*netzT)/50) {
 5b0:	60 91 cc 05 	lds	r22, 0x05CC	; 0x8005cc <timerCounter>
 5b4:	70 91 cd 05 	lds	r23, 0x05CD	; 0x8005cd <timerCounter+0x1>
 5b8:	e0 91 d4 05 	lds	r30, 0x05D4	; 0x8005d4 <ctrlVal1>
 5bc:	f0 91 d5 05 	lds	r31, 0x05D5	; 0x8005d5 <ctrlVal1+0x1>
 5c0:	ee 0f       	add	r30, r30
 5c2:	ff 1f       	adc	r31, r31
 5c4:	ee 0f       	add	r30, r30
 5c6:	ff 1f       	adc	r31, r31
 5c8:	e4 56       	subi	r30, 0x64	; 100
 5ca:	fd 4f       	sbci	r31, 0xFD	; 253
 5cc:	c0 80       	ld	r12, Z
 5ce:	d1 80       	ldd	r13, Z+1	; 0x01
 5d0:	e2 80       	ldd	r14, Z+2	; 0x02
 5d2:	f3 80       	ldd	r15, Z+3	; 0x03
 5d4:	6f 5f       	subi	r22, 0xFF	; 255
 5d6:	7f 4f       	sbci	r23, 0xFF	; 255
 5d8:	07 2e       	mov	r0, r23
 5da:	00 0c       	add	r0, r0
 5dc:	88 0b       	sbc	r24, r24
 5de:	99 0b       	sbc	r25, r25
 5e0:	0e 94 04 04 	call	0x808	; 0x808 <__floatsisf>
 5e4:	4b 01       	movw	r8, r22
 5e6:	5c 01       	movw	r10, r24
 5e8:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <netzT>
 5ec:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <netzT+0x1>
 5f0:	07 2e       	mov	r0, r23
 5f2:	00 0c       	add	r0, r0
 5f4:	88 0b       	sbc	r24, r24
 5f6:	99 0b       	sbc	r25, r25
 5f8:	0e 94 04 04 	call	0x808	; 0x808 <__floatsisf>
 5fc:	a7 01       	movw	r20, r14
 5fe:	96 01       	movw	r18, r12
 600:	0e 94 95 04 	call	0x92a	; 0x92a <__mulsf3>
 604:	20 e0       	ldi	r18, 0x00	; 0
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	48 e4       	ldi	r20, 0x48	; 72
 60a:	52 e4       	ldi	r21, 0x42	; 66
 60c:	0e 94 90 03 	call	0x720	; 0x720 <__divsf3>
 610:	9b 01       	movw	r18, r22
 612:	ac 01       	movw	r20, r24
 614:	c5 01       	movw	r24, r10
 616:	b4 01       	movw	r22, r8
 618:	0e 94 90 04 	call	0x920	; 0x920 <__gesf2>
 61c:	18 16       	cp	r1, r24
 61e:	1c f4       	brge	.+6      	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
                SSR1on();
 620:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <SSR1on>
 624:	13 ce       	rjmp	.-986    	; 0x24c <main+0x12>
            } else {
                SSR1off();
 626:	0e 94 e6 00 	call	0x1cc	; 0x1cc <SSR1off>
 62a:	10 ce       	rjmp	.-992    	; 0x24c <main+0x12>
            }
            break;
        case 6: //burst fire low momentum //WORKING
            if(intCounter+1 > 2*ctrlVal1) {
 62c:	20 91 ce 05 	lds	r18, 0x05CE	; 0x8005ce <intCounter>
 630:	30 91 cf 05 	lds	r19, 0x05CF	; 0x8005cf <intCounter+0x1>
 634:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <ctrlVal1>
 638:	90 91 d5 05 	lds	r25, 0x05D5	; 0x8005d5 <ctrlVal1+0x1>
 63c:	2f 5f       	subi	r18, 0xFF	; 255
 63e:	3f 4f       	sbci	r19, 0xFF	; 255
 640:	88 0f       	add	r24, r24
 642:	99 1f       	adc	r25, r25
 644:	82 17       	cp	r24, r18
 646:	93 07       	cpc	r25, r19
 648:	1c f4       	brge	.+6      	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
                SSR1off();
 64a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <SSR1off>
 64e:	02 c0       	rjmp	.+4      	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
            } else {
                SSR1on();
 650:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <SSR1on>
            }
            if(intCounter+1 > 2*ctrlVal2) {
 654:	20 91 ce 05 	lds	r18, 0x05CE	; 0x8005ce <intCounter>
 658:	30 91 cf 05 	lds	r19, 0x05CF	; 0x8005cf <intCounter+0x1>
 65c:	80 91 d2 05 	lds	r24, 0x05D2	; 0x8005d2 <ctrlVal2>
 660:	90 91 d3 05 	lds	r25, 0x05D3	; 0x8005d3 <ctrlVal2+0x1>
 664:	2f 5f       	subi	r18, 0xFF	; 255
 666:	3f 4f       	sbci	r19, 0xFF	; 255
 668:	88 0f       	add	r24, r24
 66a:	99 1f       	adc	r25, r25
 66c:	82 17       	cp	r24, r18
 66e:	93 07       	cpc	r25, r19
 670:	1c f4       	brge	.+6      	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
                SSR2off();
 672:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <SSR2off>
 676:	02 c0       	rjmp	.+4      	; 0x67c <__LOCK_REGION_LENGTH__+0x27c>
            } else {
                SSR2on();
 678:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <SSR2on>
            }
            if(intCounter+1 > 2*ctrlVal3) {
 67c:	20 91 ce 05 	lds	r18, 0x05CE	; 0x8005ce <intCounter>
 680:	30 91 cf 05 	lds	r19, 0x05CF	; 0x8005cf <intCounter+0x1>
 684:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <ctrlVal3>
 688:	90 91 d1 05 	lds	r25, 0x05D1	; 0x8005d1 <ctrlVal3+0x1>
 68c:	2f 5f       	subi	r18, 0xFF	; 255
 68e:	3f 4f       	sbci	r19, 0xFF	; 255
 690:	88 0f       	add	r24, r24
 692:	99 1f       	adc	r25, r25
 694:	82 17       	cp	r24, r18
 696:	93 07       	cpc	r25, r19
 698:	1c f4       	brge	.+6      	; 0x6a0 <__LOCK_REGION_LENGTH__+0x2a0>
                SSR3Aoff();
 69a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <SSR3Aoff>
 69e:	02 c0       	rjmp	.+4      	; 0x6a4 <__LOCK_REGION_LENGTH__+0x2a4>
            } else {
                SSR3Aon();
 6a0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <SSR3Aon>
            }
            if(intCounterPhaseA+1 > 2*ctrlVal3) {
 6a4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <intCounterPhaseA>
 6a8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <intCounterPhaseA+0x1>
 6ac:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <ctrlVal3>
 6b0:	90 91 d1 05 	lds	r25, 0x05D1	; 0x8005d1 <ctrlVal3+0x1>
 6b4:	2f 5f       	subi	r18, 0xFF	; 255
 6b6:	3f 4f       	sbci	r19, 0xFF	; 255
 6b8:	88 0f       	add	r24, r24
 6ba:	99 1f       	adc	r25, r25
 6bc:	82 17       	cp	r24, r18
 6be:	93 07       	cpc	r25, r19
 6c0:	1c f4       	brge	.+6      	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
                SSR3Boff();
 6c2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <SSR3Boff>
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
            } else {
                SSR3Bon();
 6c8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SSR3Bon>
            }
            if(intCounterPhaseB+1 > 2*ctrlVal3) {
 6cc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 6d0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 6d4:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <ctrlVal3>
 6d8:	90 91 d1 05 	lds	r25, 0x05D1	; 0x8005d1 <ctrlVal3+0x1>
 6dc:	2f 5f       	subi	r18, 0xFF	; 255
 6de:	3f 4f       	sbci	r19, 0xFF	; 255
 6e0:	88 0f       	add	r24, r24
 6e2:	99 1f       	adc	r25, r25
 6e4:	82 17       	cp	r24, r18
 6e6:	93 07       	cpc	r25, r19
 6e8:	1c f4       	brge	.+6      	; 0x6f0 <__LOCK_REGION_LENGTH__+0x2f0>
                SSR3Coff();
 6ea:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SSR3Coff>
 6ee:	ae cd       	rjmp	.-1188   	; 0x24c <main+0x12>
            } else {
                SSR3Con();
 6f0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <SSR3Con>
 6f4:	ab cd       	rjmp	.-1194   	; 0x24c <main+0x12>
            }
            break;
        case 7: //burst fire high momentum
            if(intCounter+1 > 2*ctrlVal1) {
 6f6:	20 91 ce 05 	lds	r18, 0x05CE	; 0x8005ce <intCounter>
 6fa:	30 91 cf 05 	lds	r19, 0x05CF	; 0x8005cf <intCounter+0x1>
 6fe:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <ctrlVal1>
 702:	90 91 d5 05 	lds	r25, 0x05D5	; 0x8005d5 <ctrlVal1+0x1>
 706:	2f 5f       	subi	r18, 0xFF	; 255
 708:	3f 4f       	sbci	r19, 0xFF	; 255
 70a:	88 0f       	add	r24, r24
 70c:	99 1f       	adc	r25, r25
 70e:	82 17       	cp	r24, r18
 710:	93 07       	cpc	r25, r19
 712:	1c f4       	brge	.+6      	; 0x71a <__LOCK_REGION_LENGTH__+0x31a>
                SSR1on();
 714:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <SSR1on>
 718:	99 cd       	rjmp	.-1230   	; 0x24c <main+0x12>
            } else {
                SSR1off();
 71a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <SSR1off>
 71e:	96 cd       	rjmp	.-1236   	; 0x24c <main+0x12>

00000720 <__divsf3>:
 720:	0e 94 a4 03 	call	0x748	; 0x748 <__divsf3x>
 724:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__fp_round>
 728:	0e 94 4f 04 	call	0x89e	; 0x89e <__fp_pscB>
 72c:	58 f0       	brcs	.+22     	; 0x744 <__divsf3+0x24>
 72e:	0e 94 48 04 	call	0x890	; 0x890 <__fp_pscA>
 732:	40 f0       	brcs	.+16     	; 0x744 <__divsf3+0x24>
 734:	29 f4       	brne	.+10     	; 0x740 <__divsf3+0x20>
 736:	5f 3f       	cpi	r21, 0xFF	; 255
 738:	29 f0       	breq	.+10     	; 0x744 <__divsf3+0x24>
 73a:	0c 94 3f 04 	jmp	0x87e	; 0x87e <__fp_inf>
 73e:	51 11       	cpse	r21, r1
 740:	0c 94 8a 04 	jmp	0x914	; 0x914 <__fp_szero>
 744:	0c 94 45 04 	jmp	0x88a	; 0x88a <__fp_nan>

00000748 <__divsf3x>:
 748:	0e 94 67 04 	call	0x8ce	; 0x8ce <__fp_split3>
 74c:	68 f3       	brcs	.-38     	; 0x728 <__divsf3+0x8>

0000074e <__divsf3_pse>:
 74e:	99 23       	and	r25, r25
 750:	b1 f3       	breq	.-20     	; 0x73e <__divsf3+0x1e>
 752:	55 23       	and	r21, r21
 754:	91 f3       	breq	.-28     	; 0x73a <__divsf3+0x1a>
 756:	95 1b       	sub	r25, r21
 758:	55 0b       	sbc	r21, r21
 75a:	bb 27       	eor	r27, r27
 75c:	aa 27       	eor	r26, r26
 75e:	62 17       	cp	r22, r18
 760:	73 07       	cpc	r23, r19
 762:	84 07       	cpc	r24, r20
 764:	38 f0       	brcs	.+14     	; 0x774 <__divsf3_pse+0x26>
 766:	9f 5f       	subi	r25, 0xFF	; 255
 768:	5f 4f       	sbci	r21, 0xFF	; 255
 76a:	22 0f       	add	r18, r18
 76c:	33 1f       	adc	r19, r19
 76e:	44 1f       	adc	r20, r20
 770:	aa 1f       	adc	r26, r26
 772:	a9 f3       	breq	.-22     	; 0x75e <__divsf3_pse+0x10>
 774:	35 d0       	rcall	.+106    	; 0x7e0 <__divsf3_pse+0x92>
 776:	0e 2e       	mov	r0, r30
 778:	3a f0       	brmi	.+14     	; 0x788 <__divsf3_pse+0x3a>
 77a:	e0 e8       	ldi	r30, 0x80	; 128
 77c:	32 d0       	rcall	.+100    	; 0x7e2 <__divsf3_pse+0x94>
 77e:	91 50       	subi	r25, 0x01	; 1
 780:	50 40       	sbci	r21, 0x00	; 0
 782:	e6 95       	lsr	r30
 784:	00 1c       	adc	r0, r0
 786:	ca f7       	brpl	.-14     	; 0x77a <__divsf3_pse+0x2c>
 788:	2b d0       	rcall	.+86     	; 0x7e0 <__divsf3_pse+0x92>
 78a:	fe 2f       	mov	r31, r30
 78c:	29 d0       	rcall	.+82     	; 0x7e0 <__divsf3_pse+0x92>
 78e:	66 0f       	add	r22, r22
 790:	77 1f       	adc	r23, r23
 792:	88 1f       	adc	r24, r24
 794:	bb 1f       	adc	r27, r27
 796:	26 17       	cp	r18, r22
 798:	37 07       	cpc	r19, r23
 79a:	48 07       	cpc	r20, r24
 79c:	ab 07       	cpc	r26, r27
 79e:	b0 e8       	ldi	r27, 0x80	; 128
 7a0:	09 f0       	breq	.+2      	; 0x7a4 <__divsf3_pse+0x56>
 7a2:	bb 0b       	sbc	r27, r27
 7a4:	80 2d       	mov	r24, r0
 7a6:	bf 01       	movw	r22, r30
 7a8:	ff 27       	eor	r31, r31
 7aa:	93 58       	subi	r25, 0x83	; 131
 7ac:	5f 4f       	sbci	r21, 0xFF	; 255
 7ae:	3a f0       	brmi	.+14     	; 0x7be <__divsf3_pse+0x70>
 7b0:	9e 3f       	cpi	r25, 0xFE	; 254
 7b2:	51 05       	cpc	r21, r1
 7b4:	78 f0       	brcs	.+30     	; 0x7d4 <__divsf3_pse+0x86>
 7b6:	0c 94 3f 04 	jmp	0x87e	; 0x87e <__fp_inf>
 7ba:	0c 94 8a 04 	jmp	0x914	; 0x914 <__fp_szero>
 7be:	5f 3f       	cpi	r21, 0xFF	; 255
 7c0:	e4 f3       	brlt	.-8      	; 0x7ba <__divsf3_pse+0x6c>
 7c2:	98 3e       	cpi	r25, 0xE8	; 232
 7c4:	d4 f3       	brlt	.-12     	; 0x7ba <__divsf3_pse+0x6c>
 7c6:	86 95       	lsr	r24
 7c8:	77 95       	ror	r23
 7ca:	67 95       	ror	r22
 7cc:	b7 95       	ror	r27
 7ce:	f7 95       	ror	r31
 7d0:	9f 5f       	subi	r25, 0xFF	; 255
 7d2:	c9 f7       	brne	.-14     	; 0x7c6 <__divsf3_pse+0x78>
 7d4:	88 0f       	add	r24, r24
 7d6:	91 1d       	adc	r25, r1
 7d8:	96 95       	lsr	r25
 7da:	87 95       	ror	r24
 7dc:	97 f9       	bld	r25, 7
 7de:	08 95       	ret
 7e0:	e1 e0       	ldi	r30, 0x01	; 1
 7e2:	66 0f       	add	r22, r22
 7e4:	77 1f       	adc	r23, r23
 7e6:	88 1f       	adc	r24, r24
 7e8:	bb 1f       	adc	r27, r27
 7ea:	62 17       	cp	r22, r18
 7ec:	73 07       	cpc	r23, r19
 7ee:	84 07       	cpc	r24, r20
 7f0:	ba 07       	cpc	r27, r26
 7f2:	20 f0       	brcs	.+8      	; 0x7fc <__divsf3_pse+0xae>
 7f4:	62 1b       	sub	r22, r18
 7f6:	73 0b       	sbc	r23, r19
 7f8:	84 0b       	sbc	r24, r20
 7fa:	ba 0b       	sbc	r27, r26
 7fc:	ee 1f       	adc	r30, r30
 7fe:	88 f7       	brcc	.-30     	; 0x7e2 <__divsf3_pse+0x94>
 800:	e0 95       	com	r30
 802:	08 95       	ret

00000804 <__floatunsisf>:
 804:	e8 94       	clt
 806:	09 c0       	rjmp	.+18     	; 0x81a <__floatsisf+0x12>

00000808 <__floatsisf>:
 808:	97 fb       	bst	r25, 7
 80a:	3e f4       	brtc	.+14     	; 0x81a <__floatsisf+0x12>
 80c:	90 95       	com	r25
 80e:	80 95       	com	r24
 810:	70 95       	com	r23
 812:	61 95       	neg	r22
 814:	7f 4f       	sbci	r23, 0xFF	; 255
 816:	8f 4f       	sbci	r24, 0xFF	; 255
 818:	9f 4f       	sbci	r25, 0xFF	; 255
 81a:	99 23       	and	r25, r25
 81c:	a9 f0       	breq	.+42     	; 0x848 <__floatsisf+0x40>
 81e:	f9 2f       	mov	r31, r25
 820:	96 e9       	ldi	r25, 0x96	; 150
 822:	bb 27       	eor	r27, r27
 824:	93 95       	inc	r25
 826:	f6 95       	lsr	r31
 828:	87 95       	ror	r24
 82a:	77 95       	ror	r23
 82c:	67 95       	ror	r22
 82e:	b7 95       	ror	r27
 830:	f1 11       	cpse	r31, r1
 832:	f8 cf       	rjmp	.-16     	; 0x824 <__floatsisf+0x1c>
 834:	fa f4       	brpl	.+62     	; 0x874 <__floatsisf+0x6c>
 836:	bb 0f       	add	r27, r27
 838:	11 f4       	brne	.+4      	; 0x83e <__floatsisf+0x36>
 83a:	60 ff       	sbrs	r22, 0
 83c:	1b c0       	rjmp	.+54     	; 0x874 <__floatsisf+0x6c>
 83e:	6f 5f       	subi	r22, 0xFF	; 255
 840:	7f 4f       	sbci	r23, 0xFF	; 255
 842:	8f 4f       	sbci	r24, 0xFF	; 255
 844:	9f 4f       	sbci	r25, 0xFF	; 255
 846:	16 c0       	rjmp	.+44     	; 0x874 <__floatsisf+0x6c>
 848:	88 23       	and	r24, r24
 84a:	11 f0       	breq	.+4      	; 0x850 <__floatsisf+0x48>
 84c:	96 e9       	ldi	r25, 0x96	; 150
 84e:	11 c0       	rjmp	.+34     	; 0x872 <__floatsisf+0x6a>
 850:	77 23       	and	r23, r23
 852:	21 f0       	breq	.+8      	; 0x85c <__floatsisf+0x54>
 854:	9e e8       	ldi	r25, 0x8E	; 142
 856:	87 2f       	mov	r24, r23
 858:	76 2f       	mov	r23, r22
 85a:	05 c0       	rjmp	.+10     	; 0x866 <__floatsisf+0x5e>
 85c:	66 23       	and	r22, r22
 85e:	71 f0       	breq	.+28     	; 0x87c <__floatsisf+0x74>
 860:	96 e8       	ldi	r25, 0x86	; 134
 862:	86 2f       	mov	r24, r22
 864:	70 e0       	ldi	r23, 0x00	; 0
 866:	60 e0       	ldi	r22, 0x00	; 0
 868:	2a f0       	brmi	.+10     	; 0x874 <__floatsisf+0x6c>
 86a:	9a 95       	dec	r25
 86c:	66 0f       	add	r22, r22
 86e:	77 1f       	adc	r23, r23
 870:	88 1f       	adc	r24, r24
 872:	da f7       	brpl	.-10     	; 0x86a <__floatsisf+0x62>
 874:	88 0f       	add	r24, r24
 876:	96 95       	lsr	r25
 878:	87 95       	ror	r24
 87a:	97 f9       	bld	r25, 7
 87c:	08 95       	ret

0000087e <__fp_inf>:
 87e:	97 f9       	bld	r25, 7
 880:	9f 67       	ori	r25, 0x7F	; 127
 882:	80 e8       	ldi	r24, 0x80	; 128
 884:	70 e0       	ldi	r23, 0x00	; 0
 886:	60 e0       	ldi	r22, 0x00	; 0
 888:	08 95       	ret

0000088a <__fp_nan>:
 88a:	9f ef       	ldi	r25, 0xFF	; 255
 88c:	80 ec       	ldi	r24, 0xC0	; 192
 88e:	08 95       	ret

00000890 <__fp_pscA>:
 890:	00 24       	eor	r0, r0
 892:	0a 94       	dec	r0
 894:	16 16       	cp	r1, r22
 896:	17 06       	cpc	r1, r23
 898:	18 06       	cpc	r1, r24
 89a:	09 06       	cpc	r0, r25
 89c:	08 95       	ret

0000089e <__fp_pscB>:
 89e:	00 24       	eor	r0, r0
 8a0:	0a 94       	dec	r0
 8a2:	12 16       	cp	r1, r18
 8a4:	13 06       	cpc	r1, r19
 8a6:	14 06       	cpc	r1, r20
 8a8:	05 06       	cpc	r0, r21
 8aa:	08 95       	ret

000008ac <__fp_round>:
 8ac:	09 2e       	mov	r0, r25
 8ae:	03 94       	inc	r0
 8b0:	00 0c       	add	r0, r0
 8b2:	11 f4       	brne	.+4      	; 0x8b8 <__fp_round+0xc>
 8b4:	88 23       	and	r24, r24
 8b6:	52 f0       	brmi	.+20     	; 0x8cc <__fp_round+0x20>
 8b8:	bb 0f       	add	r27, r27
 8ba:	40 f4       	brcc	.+16     	; 0x8cc <__fp_round+0x20>
 8bc:	bf 2b       	or	r27, r31
 8be:	11 f4       	brne	.+4      	; 0x8c4 <__fp_round+0x18>
 8c0:	60 ff       	sbrs	r22, 0
 8c2:	04 c0       	rjmp	.+8      	; 0x8cc <__fp_round+0x20>
 8c4:	6f 5f       	subi	r22, 0xFF	; 255
 8c6:	7f 4f       	sbci	r23, 0xFF	; 255
 8c8:	8f 4f       	sbci	r24, 0xFF	; 255
 8ca:	9f 4f       	sbci	r25, 0xFF	; 255
 8cc:	08 95       	ret

000008ce <__fp_split3>:
 8ce:	57 fd       	sbrc	r21, 7
 8d0:	90 58       	subi	r25, 0x80	; 128
 8d2:	44 0f       	add	r20, r20
 8d4:	55 1f       	adc	r21, r21
 8d6:	59 f0       	breq	.+22     	; 0x8ee <__fp_splitA+0x10>
 8d8:	5f 3f       	cpi	r21, 0xFF	; 255
 8da:	71 f0       	breq	.+28     	; 0x8f8 <__fp_splitA+0x1a>
 8dc:	47 95       	ror	r20

000008de <__fp_splitA>:
 8de:	88 0f       	add	r24, r24
 8e0:	97 fb       	bst	r25, 7
 8e2:	99 1f       	adc	r25, r25
 8e4:	61 f0       	breq	.+24     	; 0x8fe <__fp_splitA+0x20>
 8e6:	9f 3f       	cpi	r25, 0xFF	; 255
 8e8:	79 f0       	breq	.+30     	; 0x908 <__fp_splitA+0x2a>
 8ea:	87 95       	ror	r24
 8ec:	08 95       	ret
 8ee:	12 16       	cp	r1, r18
 8f0:	13 06       	cpc	r1, r19
 8f2:	14 06       	cpc	r1, r20
 8f4:	55 1f       	adc	r21, r21
 8f6:	f2 cf       	rjmp	.-28     	; 0x8dc <__fp_split3+0xe>
 8f8:	46 95       	lsr	r20
 8fa:	f1 df       	rcall	.-30     	; 0x8de <__fp_splitA>
 8fc:	08 c0       	rjmp	.+16     	; 0x90e <__fp_splitA+0x30>
 8fe:	16 16       	cp	r1, r22
 900:	17 06       	cpc	r1, r23
 902:	18 06       	cpc	r1, r24
 904:	99 1f       	adc	r25, r25
 906:	f1 cf       	rjmp	.-30     	; 0x8ea <__fp_splitA+0xc>
 908:	86 95       	lsr	r24
 90a:	71 05       	cpc	r23, r1
 90c:	61 05       	cpc	r22, r1
 90e:	08 94       	sec
 910:	08 95       	ret

00000912 <__fp_zero>:
 912:	e8 94       	clt

00000914 <__fp_szero>:
 914:	bb 27       	eor	r27, r27
 916:	66 27       	eor	r22, r22
 918:	77 27       	eor	r23, r23
 91a:	cb 01       	movw	r24, r22
 91c:	97 f9       	bld	r25, 7
 91e:	08 95       	ret

00000920 <__gesf2>:
 920:	0e 94 02 05 	call	0xa04	; 0xa04 <__fp_cmp>
 924:	08 f4       	brcc	.+2      	; 0x928 <__gesf2+0x8>
 926:	8f ef       	ldi	r24, 0xFF	; 255
 928:	08 95       	ret

0000092a <__mulsf3>:
 92a:	0e 94 a8 04 	call	0x950	; 0x950 <__mulsf3x>
 92e:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__fp_round>
 932:	0e 94 48 04 	call	0x890	; 0x890 <__fp_pscA>
 936:	38 f0       	brcs	.+14     	; 0x946 <__mulsf3+0x1c>
 938:	0e 94 4f 04 	call	0x89e	; 0x89e <__fp_pscB>
 93c:	20 f0       	brcs	.+8      	; 0x946 <__mulsf3+0x1c>
 93e:	95 23       	and	r25, r21
 940:	11 f0       	breq	.+4      	; 0x946 <__mulsf3+0x1c>
 942:	0c 94 3f 04 	jmp	0x87e	; 0x87e <__fp_inf>
 946:	0c 94 45 04 	jmp	0x88a	; 0x88a <__fp_nan>
 94a:	11 24       	eor	r1, r1
 94c:	0c 94 8a 04 	jmp	0x914	; 0x914 <__fp_szero>

00000950 <__mulsf3x>:
 950:	0e 94 67 04 	call	0x8ce	; 0x8ce <__fp_split3>
 954:	70 f3       	brcs	.-36     	; 0x932 <__mulsf3+0x8>

00000956 <__mulsf3_pse>:
 956:	95 9f       	mul	r25, r21
 958:	c1 f3       	breq	.-16     	; 0x94a <__mulsf3+0x20>
 95a:	95 0f       	add	r25, r21
 95c:	50 e0       	ldi	r21, 0x00	; 0
 95e:	55 1f       	adc	r21, r21
 960:	62 9f       	mul	r22, r18
 962:	f0 01       	movw	r30, r0
 964:	72 9f       	mul	r23, r18
 966:	bb 27       	eor	r27, r27
 968:	f0 0d       	add	r31, r0
 96a:	b1 1d       	adc	r27, r1
 96c:	63 9f       	mul	r22, r19
 96e:	aa 27       	eor	r26, r26
 970:	f0 0d       	add	r31, r0
 972:	b1 1d       	adc	r27, r1
 974:	aa 1f       	adc	r26, r26
 976:	64 9f       	mul	r22, r20
 978:	66 27       	eor	r22, r22
 97a:	b0 0d       	add	r27, r0
 97c:	a1 1d       	adc	r26, r1
 97e:	66 1f       	adc	r22, r22
 980:	82 9f       	mul	r24, r18
 982:	22 27       	eor	r18, r18
 984:	b0 0d       	add	r27, r0
 986:	a1 1d       	adc	r26, r1
 988:	62 1f       	adc	r22, r18
 98a:	73 9f       	mul	r23, r19
 98c:	b0 0d       	add	r27, r0
 98e:	a1 1d       	adc	r26, r1
 990:	62 1f       	adc	r22, r18
 992:	83 9f       	mul	r24, r19
 994:	a0 0d       	add	r26, r0
 996:	61 1d       	adc	r22, r1
 998:	22 1f       	adc	r18, r18
 99a:	74 9f       	mul	r23, r20
 99c:	33 27       	eor	r19, r19
 99e:	a0 0d       	add	r26, r0
 9a0:	61 1d       	adc	r22, r1
 9a2:	23 1f       	adc	r18, r19
 9a4:	84 9f       	mul	r24, r20
 9a6:	60 0d       	add	r22, r0
 9a8:	21 1d       	adc	r18, r1
 9aa:	82 2f       	mov	r24, r18
 9ac:	76 2f       	mov	r23, r22
 9ae:	6a 2f       	mov	r22, r26
 9b0:	11 24       	eor	r1, r1
 9b2:	9f 57       	subi	r25, 0x7F	; 127
 9b4:	50 40       	sbci	r21, 0x00	; 0
 9b6:	9a f0       	brmi	.+38     	; 0x9de <__mulsf3_pse+0x88>
 9b8:	f1 f0       	breq	.+60     	; 0x9f6 <__mulsf3_pse+0xa0>
 9ba:	88 23       	and	r24, r24
 9bc:	4a f0       	brmi	.+18     	; 0x9d0 <__mulsf3_pse+0x7a>
 9be:	ee 0f       	add	r30, r30
 9c0:	ff 1f       	adc	r31, r31
 9c2:	bb 1f       	adc	r27, r27
 9c4:	66 1f       	adc	r22, r22
 9c6:	77 1f       	adc	r23, r23
 9c8:	88 1f       	adc	r24, r24
 9ca:	91 50       	subi	r25, 0x01	; 1
 9cc:	50 40       	sbci	r21, 0x00	; 0
 9ce:	a9 f7       	brne	.-22     	; 0x9ba <__mulsf3_pse+0x64>
 9d0:	9e 3f       	cpi	r25, 0xFE	; 254
 9d2:	51 05       	cpc	r21, r1
 9d4:	80 f0       	brcs	.+32     	; 0x9f6 <__mulsf3_pse+0xa0>
 9d6:	0c 94 3f 04 	jmp	0x87e	; 0x87e <__fp_inf>
 9da:	0c 94 8a 04 	jmp	0x914	; 0x914 <__fp_szero>
 9de:	5f 3f       	cpi	r21, 0xFF	; 255
 9e0:	e4 f3       	brlt	.-8      	; 0x9da <__mulsf3_pse+0x84>
 9e2:	98 3e       	cpi	r25, 0xE8	; 232
 9e4:	d4 f3       	brlt	.-12     	; 0x9da <__mulsf3_pse+0x84>
 9e6:	86 95       	lsr	r24
 9e8:	77 95       	ror	r23
 9ea:	67 95       	ror	r22
 9ec:	b7 95       	ror	r27
 9ee:	f7 95       	ror	r31
 9f0:	e7 95       	ror	r30
 9f2:	9f 5f       	subi	r25, 0xFF	; 255
 9f4:	c1 f7       	brne	.-16     	; 0x9e6 <__mulsf3_pse+0x90>
 9f6:	fe 2b       	or	r31, r30
 9f8:	88 0f       	add	r24, r24
 9fa:	91 1d       	adc	r25, r1
 9fc:	96 95       	lsr	r25
 9fe:	87 95       	ror	r24
 a00:	97 f9       	bld	r25, 7
 a02:	08 95       	ret

00000a04 <__fp_cmp>:
 a04:	99 0f       	add	r25, r25
 a06:	00 08       	sbc	r0, r0
 a08:	55 0f       	add	r21, r21
 a0a:	aa 0b       	sbc	r26, r26
 a0c:	e0 e8       	ldi	r30, 0x80	; 128
 a0e:	fe ef       	ldi	r31, 0xFE	; 254
 a10:	16 16       	cp	r1, r22
 a12:	17 06       	cpc	r1, r23
 a14:	e8 07       	cpc	r30, r24
 a16:	f9 07       	cpc	r31, r25
 a18:	c0 f0       	brcs	.+48     	; 0xa4a <__fp_cmp+0x46>
 a1a:	12 16       	cp	r1, r18
 a1c:	13 06       	cpc	r1, r19
 a1e:	e4 07       	cpc	r30, r20
 a20:	f5 07       	cpc	r31, r21
 a22:	98 f0       	brcs	.+38     	; 0xa4a <__fp_cmp+0x46>
 a24:	62 1b       	sub	r22, r18
 a26:	73 0b       	sbc	r23, r19
 a28:	84 0b       	sbc	r24, r20
 a2a:	95 0b       	sbc	r25, r21
 a2c:	39 f4       	brne	.+14     	; 0xa3c <__fp_cmp+0x38>
 a2e:	0a 26       	eor	r0, r26
 a30:	61 f0       	breq	.+24     	; 0xa4a <__fp_cmp+0x46>
 a32:	23 2b       	or	r18, r19
 a34:	24 2b       	or	r18, r20
 a36:	25 2b       	or	r18, r21
 a38:	21 f4       	brne	.+8      	; 0xa42 <__fp_cmp+0x3e>
 a3a:	08 95       	ret
 a3c:	0a 26       	eor	r0, r26
 a3e:	09 f4       	brne	.+2      	; 0xa42 <__fp_cmp+0x3e>
 a40:	a1 40       	sbci	r26, 0x01	; 1
 a42:	a6 95       	lsr	r26
 a44:	8f ef       	ldi	r24, 0xFF	; 255
 a46:	81 1d       	adc	r24, r1
 a48:	81 1d       	adc	r24, r1
 a4a:	08 95       	ret

00000a4c <__tablejump2__>:
 a4c:	ee 0f       	add	r30, r30
 a4e:	ff 1f       	adc	r31, r31
 a50:	05 90       	lpm	r0, Z+
 a52:	f4 91       	lpm	r31, Z
 a54:	e0 2d       	mov	r30, r0
 a56:	09 94       	ijmp

00000a58 <atoi>:
 a58:	fc 01       	movw	r30, r24
 a5a:	88 27       	eor	r24, r24
 a5c:	99 27       	eor	r25, r25
 a5e:	e8 94       	clt
 a60:	21 91       	ld	r18, Z+
 a62:	20 32       	cpi	r18, 0x20	; 32
 a64:	e9 f3       	breq	.-6      	; 0xa60 <atoi+0x8>
 a66:	29 30       	cpi	r18, 0x09	; 9
 a68:	10 f0       	brcs	.+4      	; 0xa6e <atoi+0x16>
 a6a:	2e 30       	cpi	r18, 0x0E	; 14
 a6c:	c8 f3       	brcs	.-14     	; 0xa60 <atoi+0x8>
 a6e:	2b 32       	cpi	r18, 0x2B	; 43
 a70:	41 f0       	breq	.+16     	; 0xa82 <atoi+0x2a>
 a72:	2d 32       	cpi	r18, 0x2D	; 45
 a74:	39 f4       	brne	.+14     	; 0xa84 <atoi+0x2c>
 a76:	68 94       	set
 a78:	04 c0       	rjmp	.+8      	; 0xa82 <atoi+0x2a>
 a7a:	0e 94 76 05 	call	0xaec	; 0xaec <__mulhi_const_10>
 a7e:	82 0f       	add	r24, r18
 a80:	91 1d       	adc	r25, r1
 a82:	21 91       	ld	r18, Z+
 a84:	20 53       	subi	r18, 0x30	; 48
 a86:	2a 30       	cpi	r18, 0x0A	; 10
 a88:	c0 f3       	brcs	.-16     	; 0xa7a <atoi+0x22>
 a8a:	1e f4       	brtc	.+6      	; 0xa92 <atoi+0x3a>
 a8c:	90 95       	com	r25
 a8e:	81 95       	neg	r24
 a90:	9f 4f       	sbci	r25, 0xFF	; 255
 a92:	08 95       	ret

00000a94 <strtok>:
 a94:	46 ec       	ldi	r20, 0xC6	; 198
 a96:	55 e0       	ldi	r21, 0x05	; 5
 a98:	0e 94 4f 05 	call	0xa9e	; 0xa9e <strtok_r>
 a9c:	08 95       	ret

00000a9e <strtok_r>:
 a9e:	fa 01       	movw	r30, r20
 aa0:	a1 91       	ld	r26, Z+
 aa2:	b0 81       	ld	r27, Z
 aa4:	00 97       	sbiw	r24, 0x00	; 0
 aa6:	19 f4       	brne	.+6      	; 0xaae <strtok_r+0x10>
 aa8:	10 97       	sbiw	r26, 0x00	; 0
 aaa:	e1 f0       	breq	.+56     	; 0xae4 <strtok_r+0x46>
 aac:	cd 01       	movw	r24, r26
 aae:	dc 01       	movw	r26, r24
 ab0:	cd 01       	movw	r24, r26
 ab2:	0d 90       	ld	r0, X+
 ab4:	00 20       	and	r0, r0
 ab6:	11 f4       	brne	.+4      	; 0xabc <strtok_r+0x1e>
 ab8:	c0 01       	movw	r24, r0
 aba:	13 c0       	rjmp	.+38     	; 0xae2 <strtok_r+0x44>
 abc:	fb 01       	movw	r30, r22
 abe:	21 91       	ld	r18, Z+
 ac0:	22 23       	and	r18, r18
 ac2:	19 f0       	breq	.+6      	; 0xaca <strtok_r+0x2c>
 ac4:	20 15       	cp	r18, r0
 ac6:	d9 f7       	brne	.-10     	; 0xabe <strtok_r+0x20>
 ac8:	f3 cf       	rjmp	.-26     	; 0xab0 <strtok_r+0x12>
 aca:	fb 01       	movw	r30, r22
 acc:	21 91       	ld	r18, Z+
 ace:	20 15       	cp	r18, r0
 ad0:	19 f4       	brne	.+6      	; 0xad8 <strtok_r+0x3a>
 ad2:	1e 92       	st	-X, r1
 ad4:	11 96       	adiw	r26, 0x01	; 1
 ad6:	06 c0       	rjmp	.+12     	; 0xae4 <strtok_r+0x46>
 ad8:	22 23       	and	r18, r18
 ada:	c1 f7       	brne	.-16     	; 0xacc <strtok_r+0x2e>
 adc:	0d 90       	ld	r0, X+
 ade:	00 20       	and	r0, r0
 ae0:	a1 f7       	brne	.-24     	; 0xaca <strtok_r+0x2c>
 ae2:	d0 01       	movw	r26, r0
 ae4:	fa 01       	movw	r30, r20
 ae6:	a1 93       	st	Z+, r26
 ae8:	b0 83       	st	Z, r27
 aea:	08 95       	ret

00000aec <__mulhi_const_10>:
 aec:	7a e0       	ldi	r23, 0x0A	; 10
 aee:	97 9f       	mul	r25, r23
 af0:	90 2d       	mov	r25, r0
 af2:	87 9f       	mul	r24, r23
 af4:	80 2d       	mov	r24, r0
 af6:	91 0d       	add	r25, r1
 af8:	11 24       	eor	r1, r1
 afa:	08 95       	ret

00000afc <_exit>:
 afc:	f8 94       	cli

00000afe <__stop_program>:
 afe:	ff cf       	rjmp	.-2      	; 0xafe <__stop_program>
