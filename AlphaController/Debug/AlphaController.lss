
AlphaController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004cc  00800100  000008c6  0000095a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004d  008005cc  008005cc  00000e26  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e26  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001063  00000000  00000000  00000f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e8  00000000  00000000  00001fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000694  00000000  00000000  000028ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  00002f40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000060e  00000000  00000000  00003124  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000326  00000000  00000000  00003732  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003a58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__vector_1>
   8:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
   c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  10:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  14:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  18:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  1c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  20:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  24:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  28:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  2c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  30:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  34:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  38:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  3c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  40:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <__vector_16>
  44:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  48:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  4c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  50:	0c 94 40 02 	jmp	0x480	; 0x480 <__vector_20>
  54:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  58:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  5c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  60:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  68:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  6c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  70:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  74:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  78:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  7c:	ea 01       	movw	r28, r20
  7e:	e4 01       	movw	r28, r8
  80:	cb 01       	movw	r24, r22
  82:	b2 01       	movw	r22, r4
  84:	6b 01       	movw	r12, r22
  86:	b8 00       	.word	0x00b8	; ????
  88:	a3 01       	movw	r20, r6

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d0 e1       	ldi	r29, 0x10	; 16
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61

00000096 <__do_copy_data>:
  96:	15 e0       	ldi	r17, 0x05	; 5
  98:	a0 e0       	ldi	r26, 0x00	; 0
  9a:	b1 e0       	ldi	r27, 0x01	; 1
  9c:	e6 ec       	ldi	r30, 0xC6	; 198
  9e:	f8 e0       	ldi	r31, 0x08	; 8
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <__do_copy_data+0x10>
  a2:	05 90       	lpm	r0, Z+
  a4:	0d 92       	st	X+, r0
  a6:	ac 3c       	cpi	r26, 0xCC	; 204
  a8:	b1 07       	cpc	r27, r17
  aa:	d9 f7       	brne	.-10     	; 0xa2 <__do_copy_data+0xc>

000000ac <__do_clear_bss>:
  ac:	26 e0       	ldi	r18, 0x06	; 6
  ae:	ac ec       	ldi	r26, 0xCC	; 204
  b0:	b5 e0       	ldi	r27, 0x05	; 5
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
  b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
  b6:	a9 31       	cpi	r26, 0x19	; 25
  b8:	b2 07       	cpc	r27, r18
  ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
  bc:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  c0:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <_exit>

000000c4 <__bad_interrupt>:
  c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c8 <main>:
}
void SSR3Coff () {
    PORTB &= ~(1<<PB4);		//clear PB0 aka.  set PB0 LOW
}
void Init_Int0() {
    EIMSK |= (1<<0);
  c8:	e8 9a       	sbi	0x1d, 0	; 29
    EICRA |= (1<<ISC00);
  ca:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
  ce:	81 60       	ori	r24, 0x01	; 1
  d0:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
}
void Init_Timer_0() {
    TCCR0A = (1<<WGM01);	//ctc mode
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	84 bd       	out	0x24, r24	; 36
    TCCR0B |= (1<<CS01);	//prescaler 8
  d8:	85 b5       	in	r24, 0x25	; 37
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	85 bd       	out	0x25, r24	; 37
    OCR0A = 0x63;			//fill OCR0A with 99 for 50us angle steps
  de:	83 e6       	ldi	r24, 0x63	; 99
  e0:	87 bd       	out	0x27, r24	; 39
    TIMSK0 |= (1<<1);		//enable compare interrupt
  e2:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
  e6:	82 60       	ori	r24, 0x02	; 2
  e8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
}
void USART_Init() {
    /* Set baud rate */
    UBRR0 = 103;
  ec:	87 e6       	ldi	r24, 0x67	; 103
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  f4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    /* Enable receiver and transmitter */
    UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0)|(1<<TXCIE0);
  f8:	88 ed       	ldi	r24, 0xD8	; 216
  fa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    /* Set frame format: 8data, 1stop bit */
    UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
  fe:	86 e0       	ldi	r24, 0x06	; 6
 100:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    UCSR0C &= ~(1<<USBS0);
 104:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 108:	87 7f       	andi	r24, 0xF7	; 247
 10a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>

int main(void) {
    Init_Int0();
    Init_Timer_0();
    USART_Init();
    sei();
 10e:	78 94       	sei
    DDRB = 0xFF;
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	84 b9       	out	0x04, r24	; 4
    while(1) {
        if(uartFlag == 1 && uartBuffer != '#') {
 114:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <uartFlag>
 118:	90 91 cf 05 	lds	r25, 0x05CF	; 0x8005cf <uartFlag+0x1>
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	09 f0       	breq	.+2      	; 0x122 <main+0x5a>
 120:	79 c0       	rjmp	.+242    	; 0x214 <main+0x14c>
 122:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <uartBuffer>
 126:	83 32       	cpi	r24, 0x23	; 35
 128:	09 f4       	brne	.+2      	; 0x12c <main+0x64>
 12a:	74 c0       	rjmp	.+232    	; 0x214 <main+0x14c>
            input[bufferIdx] = uartBuffer;
 12c:	e0 91 d0 05 	lds	r30, 0x05D0	; 0x8005d0 <bufferIdx>
 130:	f0 91 d1 05 	lds	r31, 0x05D1	; 0x8005d1 <bufferIdx+0x1>
 134:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <uartBuffer>
 138:	e6 52       	subi	r30, 0x26	; 38
 13a:	fa 4f       	sbci	r31, 0xFA	; 250
 13c:	80 83       	st	Z, r24
            bufferIdx++;
 13e:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <bufferIdx>
 142:	90 91 d1 05 	lds	r25, 0x05D1	; 0x8005d1 <bufferIdx+0x1>
 146:	01 96       	adiw	r24, 0x01	; 1
 148:	90 93 d1 05 	sts	0x05D1, r25	; 0x8005d1 <bufferIdx+0x1>
 14c:	80 93 d0 05 	sts	0x05D0, r24	; 0x8005d0 <bufferIdx>
            uartFlag = 0;
 150:	10 92 cf 05 	sts	0x05CF, r1	; 0x8005cf <uartFlag+0x1>
 154:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <uartFlag>
            ctrlVal3 = atoi(token);
            bufferIdx = 0;
            uartFlag = 0;
        }
        //uart_sendc('0');
        switch(mode) {
 158:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <mode>
 15c:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <mode+0x1>
 160:	31 97       	sbiw	r30, 0x01	; 1
 162:	e7 30       	cpi	r30, 0x07	; 7
 164:	f1 05       	cpc	r31, r1
 166:	b0 f6       	brcc	.-84     	; 0x114 <main+0x4c>
 168:	e2 5c       	subi	r30, 0xC2	; 194
 16a:	ff 4f       	sbci	r31, 0xFF	; 255
 16c:	0c 94 09 04 	jmp	0x812	; 0x812 <__tablejump2__>
            } else {
                SSR1off();
            }
            break;
        case 6: //burst fire low momentum //WORKING
            if(intCounter+1 > 2*ctrlVal1) {
 170:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ctrlVal1>
 174:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ctrlVal1+0x1>
 178:	20 91 d4 05 	lds	r18, 0x05D4	; 0x8005d4 <intCounter>
 17c:	30 91 d5 05 	lds	r19, 0x05D5	; 0x8005d5 <intCounter+0x1>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	28 17       	cp	r18, r24
 186:	39 07       	cpc	r19, r25
 188:	0c f4       	brge	.+2      	; 0x18c <main+0xc4>
 18a:	32 c1       	rjmp	.+612    	; 0x3f0 <main+0x328>
}
void SSR1on () {
    PORTB |= (1<<PB0);		//set PB0 HIGH
}
void SSR1off () {
    PORTB &= ~(1<<PB0);		//clear PB0 aka.  set PB0 LOW
 18c:	28 98       	cbi	0x05, 0	; 5
            if(intCounter+1 > 2*ctrlVal1) {
                SSR1off();
            } else {
                SSR1on();
            }
            if(intCounter+1 > 2*ctrlVal2) {
 18e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ctrlVal2>
 192:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ctrlVal2+0x1>
 196:	20 91 d4 05 	lds	r18, 0x05D4	; 0x8005d4 <intCounter>
 19a:	30 91 d5 05 	lds	r19, 0x05D5	; 0x8005d5 <intCounter+0x1>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	28 17       	cp	r18, r24
 1a4:	39 07       	cpc	r19, r25
 1a6:	0c f4       	brge	.+2      	; 0x1aa <main+0xe2>
 1a8:	21 c1       	rjmp	.+578    	; 0x3ec <main+0x324>
}
void SSR2on () {
    PORTB |= (1<<PB1);		//set PB0 HIGH
}
void SSR2off () {
    PORTB &= ~(1<<PB1);		//clear PB0 aka.  set PB0 LOW
 1aa:	29 98       	cbi	0x05, 1	; 5
            if(intCounter+1 > 2*ctrlVal2) {
                SSR2off();
            } else {
                SSR2on();
            }
            if(intCounter+1 > 2*ctrlVal3) {
 1ac:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ctrlVal3>
 1b0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <ctrlVal3+0x1>
 1b4:	20 91 d4 05 	lds	r18, 0x05D4	; 0x8005d4 <intCounter>
 1b8:	30 91 d5 05 	lds	r19, 0x05D5	; 0x8005d5 <intCounter+0x1>
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	28 17       	cp	r18, r24
 1c2:	39 07       	cpc	r19, r25
 1c4:	0c f4       	brge	.+2      	; 0x1c8 <main+0x100>
 1c6:	10 c1       	rjmp	.+544    	; 0x3e8 <main+0x320>
}
void SSR3Aon () {
    PORTB |= (1<<PB2);		//set PB0 HIGH
}
void SSR3Aoff () {
    PORTB &= ~(1<<PB2);		//clear PB0 aka.  set PB0 LOW
 1c8:	2a 98       	cbi	0x05, 2	; 5
            if(intCounter+1 > 2*ctrlVal3) {
                SSR3Aoff();
            } else {
                SSR3Aon();
            }
            if(intCounterPhaseA+1 > 2*ctrlVal3) {
 1ca:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ctrlVal3>
 1ce:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <ctrlVal3+0x1>
 1d2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <intCounterPhaseA>
 1d6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <intCounterPhaseA+0x1>
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	28 17       	cp	r18, r24
 1e0:	39 07       	cpc	r19, r25
 1e2:	0c f4       	brge	.+2      	; 0x1e6 <main+0x11e>
 1e4:	ff c0       	rjmp	.+510    	; 0x3e4 <main+0x31c>
}
void SSR3Bon () {
    PORTB |= (1<<PB3);		//set PB0 HIGH
}
void SSR3Boff () {
    PORTB &= ~(1<<PB3);		//clear PB0 aka.  set PB0 LOW
 1e6:	2b 98       	cbi	0x05, 3	; 5
            if(intCounterPhaseA+1 > 2*ctrlVal3) {
                SSR3Boff();
            } else {
                SSR3Bon();
            }
            if(intCounterPhaseB+1 > 2*ctrlVal3) {
 1e8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ctrlVal3>
 1ec:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <ctrlVal3+0x1>
 1f0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 1f4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	28 17       	cp	r18, r24
 1fe:	39 07       	cpc	r19, r25
 200:	0c f4       	brge	.+2      	; 0x204 <main+0x13c>
 202:	ee c0       	rjmp	.+476    	; 0x3e0 <main+0x318>
}
void SSR3Con () {
    PORTB |= (1<<PB4);		//set PB0 HIGH
}
void SSR3Coff () {
    PORTB &= ~(1<<PB4);		//clear PB0 aka.  set PB0 LOW
 204:	2c 98       	cbi	0x05, 4	; 5
    Init_Timer_0();
    USART_Init();
    sei();
    DDRB = 0xFF;
    while(1) {
        if(uartFlag == 1 && uartBuffer != '#') {
 206:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <uartFlag>
 20a:	90 91 cf 05 	lds	r25, 0x05CF	; 0x8005cf <uartFlag+0x1>
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	09 f4       	brne	.+2      	; 0x214 <main+0x14c>
 212:	87 cf       	rjmp	.-242    	; 0x122 <main+0x5a>
            input[bufferIdx] = uartBuffer;
            bufferIdx++;
            uartFlag = 0;
        } else if (uartFlag == 1 && uartBuffer == '#') {
 214:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <uartFlag>
 218:	90 91 cf 05 	lds	r25, 0x05CF	; 0x8005cf <uartFlag+0x1>
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	09 f0       	breq	.+2      	; 0x222 <main+0x15a>
 220:	9b cf       	rjmp	.-202    	; 0x158 <main+0x90>
 222:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <uartBuffer>
 226:	83 32       	cpi	r24, 0x23	; 35
 228:	09 f0       	breq	.+2      	; 0x22c <main+0x164>
 22a:	96 cf       	rjmp	.-212    	; 0x158 <main+0x90>
            bufferIdx++;
 22c:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <bufferIdx>
 230:	90 91 d1 05 	lds	r25, 0x05D1	; 0x8005d1 <bufferIdx+0x1>
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	90 93 d1 05 	sts	0x05D1, r25	; 0x8005d1 <bufferIdx+0x1>
 23a:	80 93 d0 05 	sts	0x05D0, r24	; 0x8005d0 <bufferIdx>
            input[bufferIdx] = '\0';
 23e:	e0 91 d0 05 	lds	r30, 0x05D0	; 0x8005d0 <bufferIdx>
 242:	f0 91 d1 05 	lds	r31, 0x05D1	; 0x8005d1 <bufferIdx+0x1>
 246:	e6 52       	subi	r30, 0x26	; 38
 248:	fa 4f       	sbci	r31, 0xFA	; 250
 24a:	10 82       	st	Z, r1
            char* token = strtok(input, "-");
 24c:	6a ec       	ldi	r22, 0xCA	; 202
 24e:	75 e0       	ldi	r23, 0x05	; 5
 250:	8a ed       	ldi	r24, 0xDA	; 218
 252:	95 e0       	ldi	r25, 0x05	; 5
 254:	0e 94 2d 04 	call	0x85a	; 0x85a <strtok>
            mode = atoi(token);
 258:	0e 94 0f 04 	call	0x81e	; 0x81e <atoi>
 25c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <mode+0x1>
 260:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <mode>
            token = strtok(0, "-");
 264:	6a ec       	ldi	r22, 0xCA	; 202
 266:	75 e0       	ldi	r23, 0x05	; 5
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 2d 04 	call	0x85a	; 0x85a <strtok>
            ctrlAdc = atoi(token);
 270:	0e 94 0f 04 	call	0x81e	; 0x81e <atoi>
 274:	90 93 d7 05 	sts	0x05D7, r25	; 0x8005d7 <ctrlAdc+0x1>
 278:	80 93 d6 05 	sts	0x05D6, r24	; 0x8005d6 <ctrlAdc>
            token = strtok(0, "-");
 27c:	6a ec       	ldi	r22, 0xCA	; 202
 27e:	75 e0       	ldi	r23, 0x05	; 5
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 2d 04 	call	0x85a	; 0x85a <strtok>
            ctrlVal1 = atoi(token);
 288:	0e 94 0f 04 	call	0x81e	; 0x81e <atoi>
 28c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <ctrlVal1+0x1>
 290:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <ctrlVal1>
            token = strtok(0, "-");
 294:	6a ec       	ldi	r22, 0xCA	; 202
 296:	75 e0       	ldi	r23, 0x05	; 5
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 2d 04 	call	0x85a	; 0x85a <strtok>
            ctrlVal2 = atoi(token);
 2a0:	0e 94 0f 04 	call	0x81e	; 0x81e <atoi>
 2a4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <ctrlVal2+0x1>
 2a8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ctrlVal2>
            token = strtok(0, "-");
 2ac:	6a ec       	ldi	r22, 0xCA	; 202
 2ae:	75 e0       	ldi	r23, 0x05	; 5
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 2d 04 	call	0x85a	; 0x85a <strtok>
            ctrlVal3 = atoi(token);
 2b8:	0e 94 0f 04 	call	0x81e	; 0x81e <atoi>
 2bc:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <ctrlVal3+0x1>
 2c0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ctrlVal3>
            bufferIdx = 0;
 2c4:	10 92 d1 05 	sts	0x05D1, r1	; 0x8005d1 <bufferIdx+0x1>
 2c8:	10 92 d0 05 	sts	0x05D0, r1	; 0x8005d0 <bufferIdx>
            uartFlag = 0;
 2cc:	10 92 cf 05 	sts	0x05CF, r1	; 0x8005cf <uartFlag+0x1>
 2d0:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <uartFlag>
 2d4:	41 cf       	rjmp	.-382    	; 0x158 <main+0x90>
            } else {
                SSR1off();
            }
            break;
        case 5: //phase angle effective voltage //WORKING
            if(timerCounter+1 > (fireAngleTableV[ctrlVal1]*netzT)/50) {
 2d6:	60 91 d2 05 	lds	r22, 0x05D2	; 0x8005d2 <timerCounter>
 2da:	70 91 d3 05 	lds	r23, 0x05D3	; 0x8005d3 <timerCounter+0x1>
 2de:	c0 91 08 01 	lds	r28, 0x0108	; 0x800108 <ctrlVal1>
 2e2:	d0 91 09 01 	lds	r29, 0x0109	; 0x800109 <ctrlVal1+0x1>
 2e6:	6f 5f       	subi	r22, 0xFF	; 255
 2e8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ea:	07 2e       	mov	r0, r23
 2ec:	00 0c       	add	r0, r0
 2ee:	88 0b       	sbc	r24, r24
 2f0:	99 0b       	sbc	r25, r25
 2f2:	0e 94 e7 02 	call	0x5ce	; 0x5ce <__floatsisf>
 2f6:	6b 01       	movw	r12, r22
 2f8:	7c 01       	movw	r14, r24
 2fa:	cc 0f       	add	r28, r28
 2fc:	dd 1f       	adc	r29, r29
 2fe:	cc 0f       	add	r28, r28
 300:	dd 1f       	adc	r29, r29
 302:	ce 55       	subi	r28, 0x5E	; 94
 304:	dd 4f       	sbci	r29, 0xFD	; 253
 306:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <netzT>
 30a:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <netzT+0x1>
 30e:	07 2e       	mov	r0, r23
 310:	00 0c       	add	r0, r0
 312:	88 0b       	sbc	r24, r24
 314:	99 0b       	sbc	r25, r25
 316:	0e 94 e7 02 	call	0x5ce	; 0x5ce <__floatsisf>
 31a:	28 81       	ld	r18, Y
 31c:	39 81       	ldd	r19, Y+1	; 0x01
 31e:	4a 81       	ldd	r20, Y+2	; 0x02
 320:	5b 81       	ldd	r21, Y+3	; 0x03
 322:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__mulsf3>
 326:	20 e0       	ldi	r18, 0x00	; 0
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	48 e4       	ldi	r20, 0x48	; 72
 32c:	52 e4       	ldi	r21, 0x42	; 66
 32e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__divsf3>
 332:	9b 01       	movw	r18, r22
 334:	ac 01       	movw	r20, r24
 336:	c7 01       	movw	r24, r14
 338:	b6 01       	movw	r22, r12
 33a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <__gesf2>
 33e:	18 16       	cp	r1, r24
 340:	7c f4       	brge	.+30     	; 0x360 <main+0x298>
        uart_sendc(*s);
        s++;
    }
}
void SSR1on () {
    PORTB |= (1<<PB0);		//set PB0 HIGH
 342:	28 9a       	sbi	0x05, 0	; 5
 344:	e7 ce       	rjmp	.-562    	; 0x114 <main+0x4c>
            } else {
                SSR3Con();
            }
            break;
        case 7: //burst fire high momentum
            if(intCounter+1 > 2*ctrlVal1) {
 346:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ctrlVal1>
 34a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ctrlVal1+0x1>
 34e:	20 91 d4 05 	lds	r18, 0x05D4	; 0x8005d4 <intCounter>
 352:	30 91 d5 05 	lds	r19, 0x05D5	; 0x8005d5 <intCounter+0x1>
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	28 17       	cp	r18, r24
 35c:	39 07       	cpc	r19, r25
 35e:	8c f7       	brge	.-30     	; 0x342 <main+0x27a>
}
void SSR1on () {
    PORTB |= (1<<PB0);		//set PB0 HIGH
}
void SSR1off () {
    PORTB &= ~(1<<PB0);		//clear PB0 aka.  set PB0 LOW
 360:	28 98       	cbi	0x05, 0	; 5
 362:	d8 ce       	rjmp	.-592    	; 0x114 <main+0x4c>
            } else {
                SSR1off();
            }
            break;
        case 4: //phase angle power	//WORKING
            if(timerCounter+1 > (fireAngleTableP[ctrlVal1]*netzT)/50) {
 364:	60 91 d2 05 	lds	r22, 0x05D2	; 0x8005d2 <timerCounter>
 368:	70 91 d3 05 	lds	r23, 0x05D3	; 0x8005d3 <timerCounter+0x1>
 36c:	c0 91 08 01 	lds	r28, 0x0108	; 0x800108 <ctrlVal1>
 370:	d0 91 09 01 	lds	r29, 0x0109	; 0x800109 <ctrlVal1+0x1>
 374:	6f 5f       	subi	r22, 0xFF	; 255
 376:	7f 4f       	sbci	r23, 0xFF	; 255
 378:	07 2e       	mov	r0, r23
 37a:	00 0c       	add	r0, r0
 37c:	88 0b       	sbc	r24, r24
 37e:	99 0b       	sbc	r25, r25
 380:	0e 94 e7 02 	call	0x5ce	; 0x5ce <__floatsisf>
 384:	6b 01       	movw	r12, r22
 386:	7c 01       	movw	r14, r24
 388:	cc 0f       	add	r28, r28
 38a:	dd 1f       	adc	r29, r29
 38c:	cc 0f       	add	r28, r28
 38e:	dd 1f       	adc	r29, r29
 390:	c2 5f       	subi	r28, 0xF2	; 242
 392:	de 4f       	sbci	r29, 0xFE	; 254
 394:	b8 cf       	rjmp	.-144    	; 0x306 <main+0x23e>
            SSR3Aon();
            SSR3Bon();
            SSR3Con();
            break;
        case 3: //uncorrected phase angle //WORKING
            if(timerCounter+1 > (fireAngleTable[ctrlVal1]*netzT)/50) {
 396:	60 91 d2 05 	lds	r22, 0x05D2	; 0x8005d2 <timerCounter>
 39a:	70 91 d3 05 	lds	r23, 0x05D3	; 0x8005d3 <timerCounter+0x1>
 39e:	c0 91 08 01 	lds	r28, 0x0108	; 0x800108 <ctrlVal1>
 3a2:	d0 91 09 01 	lds	r29, 0x0109	; 0x800109 <ctrlVal1+0x1>
 3a6:	6f 5f       	subi	r22, 0xFF	; 255
 3a8:	7f 4f       	sbci	r23, 0xFF	; 255
 3aa:	07 2e       	mov	r0, r23
 3ac:	00 0c       	add	r0, r0
 3ae:	88 0b       	sbc	r24, r24
 3b0:	99 0b       	sbc	r25, r25
 3b2:	0e 94 e7 02 	call	0x5ce	; 0x5ce <__floatsisf>
 3b6:	6b 01       	movw	r12, r22
 3b8:	7c 01       	movw	r14, r24
 3ba:	cc 0f       	add	r28, r28
 3bc:	dd 1f       	adc	r29, r29
 3be:	cc 0f       	add	r28, r28
 3c0:	dd 1f       	adc	r29, r29
 3c2:	ca 5c       	subi	r28, 0xCA	; 202
 3c4:	db 4f       	sbci	r29, 0xFB	; 251
 3c6:	9f cf       	rjmp	.-194    	; 0x306 <main+0x23e>
        uart_sendc(*s);
        s++;
    }
}
void SSR1on () {
    PORTB |= (1<<PB0);		//set PB0 HIGH
 3c8:	28 9a       	sbi	0x05, 0	; 5
}
void SSR1off () {
    PORTB &= ~(1<<PB0);		//clear PB0 aka.  set PB0 LOW
}
void SSR2on () {
    PORTB |= (1<<PB1);		//set PB0 HIGH
 3ca:	29 9a       	sbi	0x05, 1	; 5
}
void SSR2off () {
    PORTB &= ~(1<<PB1);		//clear PB0 aka.  set PB0 LOW
}
void SSR3Aon () {
    PORTB |= (1<<PB2);		//set PB0 HIGH
 3cc:	2a 9a       	sbi	0x05, 2	; 5
}
void SSR3Aoff () {
    PORTB &= ~(1<<PB2);		//clear PB0 aka.  set PB0 LOW
}
void SSR3Bon () {
    PORTB |= (1<<PB3);		//set PB0 HIGH
 3ce:	2b 9a       	sbi	0x05, 3	; 5
}
void SSR3Boff () {
    PORTB &= ~(1<<PB3);		//clear PB0 aka.  set PB0 LOW
}
void SSR3Con () {
    PORTB |= (1<<PB4);		//set PB0 HIGH
 3d0:	2c 9a       	sbi	0x05, 4	; 5
 3d2:	a0 ce       	rjmp	.-704    	; 0x114 <main+0x4c>
}
void SSR1on () {
    PORTB |= (1<<PB0);		//set PB0 HIGH
}
void SSR1off () {
    PORTB &= ~(1<<PB0);		//clear PB0 aka.  set PB0 LOW
 3d4:	28 98       	cbi	0x05, 0	; 5
}
void SSR2on () {
    PORTB |= (1<<PB1);		//set PB0 HIGH
}
void SSR2off () {
    PORTB &= ~(1<<PB1);		//clear PB0 aka.  set PB0 LOW
 3d6:	29 98       	cbi	0x05, 1	; 5
}
void SSR3Aon () {
    PORTB |= (1<<PB2);		//set PB0 HIGH
}
void SSR3Aoff () {
    PORTB &= ~(1<<PB2);		//clear PB0 aka.  set PB0 LOW
 3d8:	2a 98       	cbi	0x05, 2	; 5
}
void SSR3Bon () {
    PORTB |= (1<<PB3);		//set PB0 HIGH
}
void SSR3Boff () {
    PORTB &= ~(1<<PB3);		//clear PB0 aka.  set PB0 LOW
 3da:	2b 98       	cbi	0x05, 3	; 5
}
void SSR3Con () {
    PORTB |= (1<<PB4);		//set PB0 HIGH
}
void SSR3Coff () {
    PORTB &= ~(1<<PB4);		//clear PB0 aka.  set PB0 LOW
 3dc:	2c 98       	cbi	0x05, 4	; 5
 3de:	9a ce       	rjmp	.-716    	; 0x114 <main+0x4c>
}
void SSR3Boff () {
    PORTB &= ~(1<<PB3);		//clear PB0 aka.  set PB0 LOW
}
void SSR3Con () {
    PORTB |= (1<<PB4);		//set PB0 HIGH
 3e0:	2c 9a       	sbi	0x05, 4	; 5
 3e2:	98 ce       	rjmp	.-720    	; 0x114 <main+0x4c>
}
void SSR3Aoff () {
    PORTB &= ~(1<<PB2);		//clear PB0 aka.  set PB0 LOW
}
void SSR3Bon () {
    PORTB |= (1<<PB3);		//set PB0 HIGH
 3e4:	2b 9a       	sbi	0x05, 3	; 5
 3e6:	00 cf       	rjmp	.-512    	; 0x1e8 <main+0x120>
}
void SSR2off () {
    PORTB &= ~(1<<PB1);		//clear PB0 aka.  set PB0 LOW
}
void SSR3Aon () {
    PORTB |= (1<<PB2);		//set PB0 HIGH
 3e8:	2a 9a       	sbi	0x05, 2	; 5
 3ea:	ef ce       	rjmp	.-546    	; 0x1ca <main+0x102>
}
void SSR1off () {
    PORTB &= ~(1<<PB0);		//clear PB0 aka.  set PB0 LOW
}
void SSR2on () {
    PORTB |= (1<<PB1);		//set PB0 HIGH
 3ec:	29 9a       	sbi	0x05, 1	; 5
 3ee:	de ce       	rjmp	.-580    	; 0x1ac <main+0xe4>
        uart_sendc(*s);
        s++;
    }
}
void SSR1on () {
    PORTB |= (1<<PB0);		//set PB0 HIGH
 3f0:	28 9a       	sbi	0x05, 0	; 5
 3f2:	cd ce       	rjmp	.-614    	; 0x18e <main+0xc6>

000003f4 <__vector_1>:
            }
            break;
        }
    }
}
ISR (INT0_vect) {
 3f4:	1f 92       	push	r1
 3f6:	0f 92       	push	r0
 3f8:	0f b6       	in	r0, 0x3f	; 63
 3fa:	0f 92       	push	r0
 3fc:	11 24       	eor	r1, r1
 3fe:	8f 93       	push	r24
 400:	9f 93       	push	r25
    timerCounter = 0;
 402:	10 92 d3 05 	sts	0x05D3, r1	; 0x8005d3 <timerCounter+0x1>
 406:	10 92 d2 05 	sts	0x05D2, r1	; 0x8005d2 <timerCounter>
    TCNT0 = 0;
 40a:	16 bc       	out	0x26, r1	; 38
    intCounter++;
 40c:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <intCounter>
 410:	90 91 d5 05 	lds	r25, 0x05D5	; 0x8005d5 <intCounter+0x1>
 414:	01 96       	adiw	r24, 0x01	; 1
 416:	90 93 d5 05 	sts	0x05D5, r25	; 0x8005d5 <intCounter+0x1>
 41a:	80 93 d4 05 	sts	0x05D4, r24	; 0x8005d4 <intCounter>
    //intCounterPhaseA++;
    //intCounterPhaseB++;
    if (intCounter == 200) {
 41e:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <intCounter>
 422:	90 91 d5 05 	lds	r25, 0x05D5	; 0x8005d5 <intCounter+0x1>
 426:	88 3c       	cpi	r24, 0xC8	; 200
 428:	91 05       	cpc	r25, r1
 42a:	f1 f0       	breq	.+60     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
        //}
        //if(mode == 7){
        //calcBurstVals();
        //}
    }
    if (intCounterPhaseA == 200) {
 42c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <intCounterPhaseA>
 430:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <intCounterPhaseA+0x1>
 434:	88 3c       	cpi	r24, 0xC8	; 200
 436:	91 05       	cpc	r25, r1
 438:	91 f0       	breq	.+36     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
        intCounterPhaseA = 0;
    }
    if (intCounterPhaseB == 200) {
 43a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 43e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 442:	88 3c       	cpi	r24, 0xC8	; 200
 444:	91 05       	cpc	r25, r1
 446:	21 f4       	brne	.+8      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
        intCounterPhaseB = 0;
 448:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 44c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
    }
}
 450:	9f 91       	pop	r25
 452:	8f 91       	pop	r24
 454:	0f 90       	pop	r0
 456:	0f be       	out	0x3f, r0	; 63
 458:	0f 90       	pop	r0
 45a:	1f 90       	pop	r1
 45c:	18 95       	reti
        //if(mode == 7){
        //calcBurstVals();
        //}
    }
    if (intCounterPhaseA == 200) {
        intCounterPhaseA = 0;
 45e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <intCounterPhaseA+0x1>
 462:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <intCounterPhaseA>
 466:	e9 cf       	rjmp	.-46     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
    TCNT0 = 0;
    intCounter++;
    //intCounterPhaseA++;
    //intCounterPhaseB++;
    if (intCounter == 200) {
        intCounter = 0;
 468:	10 92 d5 05 	sts	0x05D5, r1	; 0x8005d5 <intCounter+0x1>
 46c:	10 92 d4 05 	sts	0x05D4, r1	; 0x8005d4 <intCounter>
    // Noch ein '\0' anh?ngen um einen Standard
    // C-String daraus zu machen
    *Buffer = '\0';
}
void uart_sendc(char c) {
    while (!(UCSR0A & (1<<UDRE0))) { /* warten bis Senden moeglich */
 470:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 474:	85 ff       	sbrs	r24, 5
 476:	fc cf       	rjmp	.-8      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
    }
    UDR0 = c;                      /* sende Zeichen */
 478:	82 e7       	ldi	r24, 0x72	; 114
 47a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 47e:	d6 cf       	rjmp	.-84     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>

00000480 <__vector_20>:
    }
    if (intCounterPhaseB == 200) {
        intCounterPhaseB = 0;
    }
}
ISR(USART0_RX_vect) { //Wenn empfangen->wird das ausgefuehrt
 480:	1f 92       	push	r1
 482:	0f 92       	push	r0
 484:	0f b6       	in	r0, 0x3f	; 63
 486:	0f 92       	push	r0
 488:	11 24       	eor	r1, r1
 48a:	8f 93       	push	r24
 48c:	9f 93       	push	r25
        rhythm = 0;
    }
}
unsigned char uart_getc() {
    /* Wait for data to be received */
    while (!(UCSR0A & (1<<RXC0))) {
 48e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 492:	87 ff       	sbrs	r24, 7
 494:	fc cf       	rjmp	.-8      	; 0x48e <__vector_20+0xe>
    }
    /* Get and return received data from buffer */
    return UDR0;
 496:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    if (intCounterPhaseB == 200) {
        intCounterPhaseB = 0;
    }
}
ISR(USART0_RX_vect) { //Wenn empfangen->wird das ausgefuehrt
    uartBuffer = uart_getc();
 49a:	80 93 18 06 	sts	0x0618, r24	; 0x800618 <uartBuffer>
    uartFlag = 1;
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	90 93 cf 05 	sts	0x05CF, r25	; 0x8005cf <uartFlag+0x1>
 4a6:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <uartFlag>
    ctrlVal2 = atoi(token);
    token = strtok(0, "-");
    ctrlVal3 = atoi(token);*/
    //ctrlVal1 = (uart_getc()-'0')*10;
    //ctrlVal2 = (uart_getc()-'0')*10;
}
 4aa:	9f 91       	pop	r25
 4ac:	8f 91       	pop	r24
 4ae:	0f 90       	pop	r0
 4b0:	0f be       	out	0x3f, r0	; 63
 4b2:	0f 90       	pop	r0
 4b4:	1f 90       	pop	r1
 4b6:	18 95       	reti

000004b8 <__vector_16>:
ISR (TIMER0_COMPA_vect) {
 4b8:	1f 92       	push	r1
 4ba:	0f 92       	push	r0
 4bc:	0f b6       	in	r0, 0x3f	; 63
 4be:	0f 92       	push	r0
 4c0:	11 24       	eor	r1, r1
 4c2:	8f 93       	push	r24
 4c4:	9f 93       	push	r25
    timerCounter++;
 4c6:	80 91 d2 05 	lds	r24, 0x05D2	; 0x8005d2 <timerCounter>
 4ca:	90 91 d3 05 	lds	r25, 0x05D3	; 0x8005d3 <timerCounter+0x1>
 4ce:	01 96       	adiw	r24, 0x01	; 1
 4d0:	90 93 d3 05 	sts	0x05D3, r25	; 0x8005d3 <timerCounter+0x1>
 4d4:	80 93 d2 05 	sts	0x05D2, r24	; 0x8005d2 <timerCounter>
}
 4d8:	9f 91       	pop	r25
 4da:	8f 91       	pop	r24
 4dc:	0f 90       	pop	r0
 4de:	0f be       	out	0x3f, r0	; 63
 4e0:	0f 90       	pop	r0
 4e2:	1f 90       	pop	r1
 4e4:	18 95       	reti

000004e6 <__divsf3>:
 4e6:	0e 94 87 02 	call	0x50e	; 0x50e <__divsf3x>
 4ea:	0c 94 39 03 	jmp	0x672	; 0x672 <__fp_round>
 4ee:	0e 94 32 03 	call	0x664	; 0x664 <__fp_pscB>
 4f2:	58 f0       	brcs	.+22     	; 0x50a <__divsf3+0x24>
 4f4:	0e 94 2b 03 	call	0x656	; 0x656 <__fp_pscA>
 4f8:	40 f0       	brcs	.+16     	; 0x50a <__divsf3+0x24>
 4fa:	29 f4       	brne	.+10     	; 0x506 <__divsf3+0x20>
 4fc:	5f 3f       	cpi	r21, 0xFF	; 255
 4fe:	29 f0       	breq	.+10     	; 0x50a <__divsf3+0x24>
 500:	0c 94 22 03 	jmp	0x644	; 0x644 <__fp_inf>
 504:	51 11       	cpse	r21, r1
 506:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__fp_szero>
 50a:	0c 94 28 03 	jmp	0x650	; 0x650 <__fp_nan>

0000050e <__divsf3x>:
 50e:	0e 94 4a 03 	call	0x694	; 0x694 <__fp_split3>
 512:	68 f3       	brcs	.-38     	; 0x4ee <__divsf3+0x8>

00000514 <__divsf3_pse>:
 514:	99 23       	and	r25, r25
 516:	b1 f3       	breq	.-20     	; 0x504 <__divsf3+0x1e>
 518:	55 23       	and	r21, r21
 51a:	91 f3       	breq	.-28     	; 0x500 <__divsf3+0x1a>
 51c:	95 1b       	sub	r25, r21
 51e:	55 0b       	sbc	r21, r21
 520:	bb 27       	eor	r27, r27
 522:	aa 27       	eor	r26, r26
 524:	62 17       	cp	r22, r18
 526:	73 07       	cpc	r23, r19
 528:	84 07       	cpc	r24, r20
 52a:	38 f0       	brcs	.+14     	; 0x53a <__divsf3_pse+0x26>
 52c:	9f 5f       	subi	r25, 0xFF	; 255
 52e:	5f 4f       	sbci	r21, 0xFF	; 255
 530:	22 0f       	add	r18, r18
 532:	33 1f       	adc	r19, r19
 534:	44 1f       	adc	r20, r20
 536:	aa 1f       	adc	r26, r26
 538:	a9 f3       	breq	.-22     	; 0x524 <__divsf3_pse+0x10>
 53a:	35 d0       	rcall	.+106    	; 0x5a6 <__divsf3_pse+0x92>
 53c:	0e 2e       	mov	r0, r30
 53e:	3a f0       	brmi	.+14     	; 0x54e <__divsf3_pse+0x3a>
 540:	e0 e8       	ldi	r30, 0x80	; 128
 542:	32 d0       	rcall	.+100    	; 0x5a8 <__divsf3_pse+0x94>
 544:	91 50       	subi	r25, 0x01	; 1
 546:	50 40       	sbci	r21, 0x00	; 0
 548:	e6 95       	lsr	r30
 54a:	00 1c       	adc	r0, r0
 54c:	ca f7       	brpl	.-14     	; 0x540 <__divsf3_pse+0x2c>
 54e:	2b d0       	rcall	.+86     	; 0x5a6 <__divsf3_pse+0x92>
 550:	fe 2f       	mov	r31, r30
 552:	29 d0       	rcall	.+82     	; 0x5a6 <__divsf3_pse+0x92>
 554:	66 0f       	add	r22, r22
 556:	77 1f       	adc	r23, r23
 558:	88 1f       	adc	r24, r24
 55a:	bb 1f       	adc	r27, r27
 55c:	26 17       	cp	r18, r22
 55e:	37 07       	cpc	r19, r23
 560:	48 07       	cpc	r20, r24
 562:	ab 07       	cpc	r26, r27
 564:	b0 e8       	ldi	r27, 0x80	; 128
 566:	09 f0       	breq	.+2      	; 0x56a <__divsf3_pse+0x56>
 568:	bb 0b       	sbc	r27, r27
 56a:	80 2d       	mov	r24, r0
 56c:	bf 01       	movw	r22, r30
 56e:	ff 27       	eor	r31, r31
 570:	93 58       	subi	r25, 0x83	; 131
 572:	5f 4f       	sbci	r21, 0xFF	; 255
 574:	3a f0       	brmi	.+14     	; 0x584 <__divsf3_pse+0x70>
 576:	9e 3f       	cpi	r25, 0xFE	; 254
 578:	51 05       	cpc	r21, r1
 57a:	78 f0       	brcs	.+30     	; 0x59a <__divsf3_pse+0x86>
 57c:	0c 94 22 03 	jmp	0x644	; 0x644 <__fp_inf>
 580:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__fp_szero>
 584:	5f 3f       	cpi	r21, 0xFF	; 255
 586:	e4 f3       	brlt	.-8      	; 0x580 <__divsf3_pse+0x6c>
 588:	98 3e       	cpi	r25, 0xE8	; 232
 58a:	d4 f3       	brlt	.-12     	; 0x580 <__divsf3_pse+0x6c>
 58c:	86 95       	lsr	r24
 58e:	77 95       	ror	r23
 590:	67 95       	ror	r22
 592:	b7 95       	ror	r27
 594:	f7 95       	ror	r31
 596:	9f 5f       	subi	r25, 0xFF	; 255
 598:	c9 f7       	brne	.-14     	; 0x58c <__divsf3_pse+0x78>
 59a:	88 0f       	add	r24, r24
 59c:	91 1d       	adc	r25, r1
 59e:	96 95       	lsr	r25
 5a0:	87 95       	ror	r24
 5a2:	97 f9       	bld	r25, 7
 5a4:	08 95       	ret
 5a6:	e1 e0       	ldi	r30, 0x01	; 1
 5a8:	66 0f       	add	r22, r22
 5aa:	77 1f       	adc	r23, r23
 5ac:	88 1f       	adc	r24, r24
 5ae:	bb 1f       	adc	r27, r27
 5b0:	62 17       	cp	r22, r18
 5b2:	73 07       	cpc	r23, r19
 5b4:	84 07       	cpc	r24, r20
 5b6:	ba 07       	cpc	r27, r26
 5b8:	20 f0       	brcs	.+8      	; 0x5c2 <__divsf3_pse+0xae>
 5ba:	62 1b       	sub	r22, r18
 5bc:	73 0b       	sbc	r23, r19
 5be:	84 0b       	sbc	r24, r20
 5c0:	ba 0b       	sbc	r27, r26
 5c2:	ee 1f       	adc	r30, r30
 5c4:	88 f7       	brcc	.-30     	; 0x5a8 <__divsf3_pse+0x94>
 5c6:	e0 95       	com	r30
 5c8:	08 95       	ret

000005ca <__floatunsisf>:
 5ca:	e8 94       	clt
 5cc:	09 c0       	rjmp	.+18     	; 0x5e0 <__floatsisf+0x12>

000005ce <__floatsisf>:
 5ce:	97 fb       	bst	r25, 7
 5d0:	3e f4       	brtc	.+14     	; 0x5e0 <__floatsisf+0x12>
 5d2:	90 95       	com	r25
 5d4:	80 95       	com	r24
 5d6:	70 95       	com	r23
 5d8:	61 95       	neg	r22
 5da:	7f 4f       	sbci	r23, 0xFF	; 255
 5dc:	8f 4f       	sbci	r24, 0xFF	; 255
 5de:	9f 4f       	sbci	r25, 0xFF	; 255
 5e0:	99 23       	and	r25, r25
 5e2:	a9 f0       	breq	.+42     	; 0x60e <__floatsisf+0x40>
 5e4:	f9 2f       	mov	r31, r25
 5e6:	96 e9       	ldi	r25, 0x96	; 150
 5e8:	bb 27       	eor	r27, r27
 5ea:	93 95       	inc	r25
 5ec:	f6 95       	lsr	r31
 5ee:	87 95       	ror	r24
 5f0:	77 95       	ror	r23
 5f2:	67 95       	ror	r22
 5f4:	b7 95       	ror	r27
 5f6:	f1 11       	cpse	r31, r1
 5f8:	f8 cf       	rjmp	.-16     	; 0x5ea <__floatsisf+0x1c>
 5fa:	fa f4       	brpl	.+62     	; 0x63a <__floatsisf+0x6c>
 5fc:	bb 0f       	add	r27, r27
 5fe:	11 f4       	brne	.+4      	; 0x604 <__floatsisf+0x36>
 600:	60 ff       	sbrs	r22, 0
 602:	1b c0       	rjmp	.+54     	; 0x63a <__floatsisf+0x6c>
 604:	6f 5f       	subi	r22, 0xFF	; 255
 606:	7f 4f       	sbci	r23, 0xFF	; 255
 608:	8f 4f       	sbci	r24, 0xFF	; 255
 60a:	9f 4f       	sbci	r25, 0xFF	; 255
 60c:	16 c0       	rjmp	.+44     	; 0x63a <__floatsisf+0x6c>
 60e:	88 23       	and	r24, r24
 610:	11 f0       	breq	.+4      	; 0x616 <__floatsisf+0x48>
 612:	96 e9       	ldi	r25, 0x96	; 150
 614:	11 c0       	rjmp	.+34     	; 0x638 <__floatsisf+0x6a>
 616:	77 23       	and	r23, r23
 618:	21 f0       	breq	.+8      	; 0x622 <__floatsisf+0x54>
 61a:	9e e8       	ldi	r25, 0x8E	; 142
 61c:	87 2f       	mov	r24, r23
 61e:	76 2f       	mov	r23, r22
 620:	05 c0       	rjmp	.+10     	; 0x62c <__floatsisf+0x5e>
 622:	66 23       	and	r22, r22
 624:	71 f0       	breq	.+28     	; 0x642 <__floatsisf+0x74>
 626:	96 e8       	ldi	r25, 0x86	; 134
 628:	86 2f       	mov	r24, r22
 62a:	70 e0       	ldi	r23, 0x00	; 0
 62c:	60 e0       	ldi	r22, 0x00	; 0
 62e:	2a f0       	brmi	.+10     	; 0x63a <__floatsisf+0x6c>
 630:	9a 95       	dec	r25
 632:	66 0f       	add	r22, r22
 634:	77 1f       	adc	r23, r23
 636:	88 1f       	adc	r24, r24
 638:	da f7       	brpl	.-10     	; 0x630 <__floatsisf+0x62>
 63a:	88 0f       	add	r24, r24
 63c:	96 95       	lsr	r25
 63e:	87 95       	ror	r24
 640:	97 f9       	bld	r25, 7
 642:	08 95       	ret

00000644 <__fp_inf>:
 644:	97 f9       	bld	r25, 7
 646:	9f 67       	ori	r25, 0x7F	; 127
 648:	80 e8       	ldi	r24, 0x80	; 128
 64a:	70 e0       	ldi	r23, 0x00	; 0
 64c:	60 e0       	ldi	r22, 0x00	; 0
 64e:	08 95       	ret

00000650 <__fp_nan>:
 650:	9f ef       	ldi	r25, 0xFF	; 255
 652:	80 ec       	ldi	r24, 0xC0	; 192
 654:	08 95       	ret

00000656 <__fp_pscA>:
 656:	00 24       	eor	r0, r0
 658:	0a 94       	dec	r0
 65a:	16 16       	cp	r1, r22
 65c:	17 06       	cpc	r1, r23
 65e:	18 06       	cpc	r1, r24
 660:	09 06       	cpc	r0, r25
 662:	08 95       	ret

00000664 <__fp_pscB>:
 664:	00 24       	eor	r0, r0
 666:	0a 94       	dec	r0
 668:	12 16       	cp	r1, r18
 66a:	13 06       	cpc	r1, r19
 66c:	14 06       	cpc	r1, r20
 66e:	05 06       	cpc	r0, r21
 670:	08 95       	ret

00000672 <__fp_round>:
 672:	09 2e       	mov	r0, r25
 674:	03 94       	inc	r0
 676:	00 0c       	add	r0, r0
 678:	11 f4       	brne	.+4      	; 0x67e <__fp_round+0xc>
 67a:	88 23       	and	r24, r24
 67c:	52 f0       	brmi	.+20     	; 0x692 <__fp_round+0x20>
 67e:	bb 0f       	add	r27, r27
 680:	40 f4       	brcc	.+16     	; 0x692 <__fp_round+0x20>
 682:	bf 2b       	or	r27, r31
 684:	11 f4       	brne	.+4      	; 0x68a <__fp_round+0x18>
 686:	60 ff       	sbrs	r22, 0
 688:	04 c0       	rjmp	.+8      	; 0x692 <__fp_round+0x20>
 68a:	6f 5f       	subi	r22, 0xFF	; 255
 68c:	7f 4f       	sbci	r23, 0xFF	; 255
 68e:	8f 4f       	sbci	r24, 0xFF	; 255
 690:	9f 4f       	sbci	r25, 0xFF	; 255
 692:	08 95       	ret

00000694 <__fp_split3>:
 694:	57 fd       	sbrc	r21, 7
 696:	90 58       	subi	r25, 0x80	; 128
 698:	44 0f       	add	r20, r20
 69a:	55 1f       	adc	r21, r21
 69c:	59 f0       	breq	.+22     	; 0x6b4 <__fp_splitA+0x10>
 69e:	5f 3f       	cpi	r21, 0xFF	; 255
 6a0:	71 f0       	breq	.+28     	; 0x6be <__fp_splitA+0x1a>
 6a2:	47 95       	ror	r20

000006a4 <__fp_splitA>:
 6a4:	88 0f       	add	r24, r24
 6a6:	97 fb       	bst	r25, 7
 6a8:	99 1f       	adc	r25, r25
 6aa:	61 f0       	breq	.+24     	; 0x6c4 <__fp_splitA+0x20>
 6ac:	9f 3f       	cpi	r25, 0xFF	; 255
 6ae:	79 f0       	breq	.+30     	; 0x6ce <__fp_splitA+0x2a>
 6b0:	87 95       	ror	r24
 6b2:	08 95       	ret
 6b4:	12 16       	cp	r1, r18
 6b6:	13 06       	cpc	r1, r19
 6b8:	14 06       	cpc	r1, r20
 6ba:	55 1f       	adc	r21, r21
 6bc:	f2 cf       	rjmp	.-28     	; 0x6a2 <__fp_split3+0xe>
 6be:	46 95       	lsr	r20
 6c0:	f1 df       	rcall	.-30     	; 0x6a4 <__fp_splitA>
 6c2:	08 c0       	rjmp	.+16     	; 0x6d4 <__fp_splitA+0x30>
 6c4:	16 16       	cp	r1, r22
 6c6:	17 06       	cpc	r1, r23
 6c8:	18 06       	cpc	r1, r24
 6ca:	99 1f       	adc	r25, r25
 6cc:	f1 cf       	rjmp	.-30     	; 0x6b0 <__fp_splitA+0xc>
 6ce:	86 95       	lsr	r24
 6d0:	71 05       	cpc	r23, r1
 6d2:	61 05       	cpc	r22, r1
 6d4:	08 94       	sec
 6d6:	08 95       	ret

000006d8 <__fp_zero>:
 6d8:	e8 94       	clt

000006da <__fp_szero>:
 6da:	bb 27       	eor	r27, r27
 6dc:	66 27       	eor	r22, r22
 6de:	77 27       	eor	r23, r23
 6e0:	cb 01       	movw	r24, r22
 6e2:	97 f9       	bld	r25, 7
 6e4:	08 95       	ret

000006e6 <__gesf2>:
 6e6:	0e 94 e5 03 	call	0x7ca	; 0x7ca <__fp_cmp>
 6ea:	08 f4       	brcc	.+2      	; 0x6ee <__gesf2+0x8>
 6ec:	8f ef       	ldi	r24, 0xFF	; 255
 6ee:	08 95       	ret

000006f0 <__mulsf3>:
 6f0:	0e 94 8b 03 	call	0x716	; 0x716 <__mulsf3x>
 6f4:	0c 94 39 03 	jmp	0x672	; 0x672 <__fp_round>
 6f8:	0e 94 2b 03 	call	0x656	; 0x656 <__fp_pscA>
 6fc:	38 f0       	brcs	.+14     	; 0x70c <__mulsf3+0x1c>
 6fe:	0e 94 32 03 	call	0x664	; 0x664 <__fp_pscB>
 702:	20 f0       	brcs	.+8      	; 0x70c <__mulsf3+0x1c>
 704:	95 23       	and	r25, r21
 706:	11 f0       	breq	.+4      	; 0x70c <__mulsf3+0x1c>
 708:	0c 94 22 03 	jmp	0x644	; 0x644 <__fp_inf>
 70c:	0c 94 28 03 	jmp	0x650	; 0x650 <__fp_nan>
 710:	11 24       	eor	r1, r1
 712:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__fp_szero>

00000716 <__mulsf3x>:
 716:	0e 94 4a 03 	call	0x694	; 0x694 <__fp_split3>
 71a:	70 f3       	brcs	.-36     	; 0x6f8 <__mulsf3+0x8>

0000071c <__mulsf3_pse>:
 71c:	95 9f       	mul	r25, r21
 71e:	c1 f3       	breq	.-16     	; 0x710 <__mulsf3+0x20>
 720:	95 0f       	add	r25, r21
 722:	50 e0       	ldi	r21, 0x00	; 0
 724:	55 1f       	adc	r21, r21
 726:	62 9f       	mul	r22, r18
 728:	f0 01       	movw	r30, r0
 72a:	72 9f       	mul	r23, r18
 72c:	bb 27       	eor	r27, r27
 72e:	f0 0d       	add	r31, r0
 730:	b1 1d       	adc	r27, r1
 732:	63 9f       	mul	r22, r19
 734:	aa 27       	eor	r26, r26
 736:	f0 0d       	add	r31, r0
 738:	b1 1d       	adc	r27, r1
 73a:	aa 1f       	adc	r26, r26
 73c:	64 9f       	mul	r22, r20
 73e:	66 27       	eor	r22, r22
 740:	b0 0d       	add	r27, r0
 742:	a1 1d       	adc	r26, r1
 744:	66 1f       	adc	r22, r22
 746:	82 9f       	mul	r24, r18
 748:	22 27       	eor	r18, r18
 74a:	b0 0d       	add	r27, r0
 74c:	a1 1d       	adc	r26, r1
 74e:	62 1f       	adc	r22, r18
 750:	73 9f       	mul	r23, r19
 752:	b0 0d       	add	r27, r0
 754:	a1 1d       	adc	r26, r1
 756:	62 1f       	adc	r22, r18
 758:	83 9f       	mul	r24, r19
 75a:	a0 0d       	add	r26, r0
 75c:	61 1d       	adc	r22, r1
 75e:	22 1f       	adc	r18, r18
 760:	74 9f       	mul	r23, r20
 762:	33 27       	eor	r19, r19
 764:	a0 0d       	add	r26, r0
 766:	61 1d       	adc	r22, r1
 768:	23 1f       	adc	r18, r19
 76a:	84 9f       	mul	r24, r20
 76c:	60 0d       	add	r22, r0
 76e:	21 1d       	adc	r18, r1
 770:	82 2f       	mov	r24, r18
 772:	76 2f       	mov	r23, r22
 774:	6a 2f       	mov	r22, r26
 776:	11 24       	eor	r1, r1
 778:	9f 57       	subi	r25, 0x7F	; 127
 77a:	50 40       	sbci	r21, 0x00	; 0
 77c:	9a f0       	brmi	.+38     	; 0x7a4 <__mulsf3_pse+0x88>
 77e:	f1 f0       	breq	.+60     	; 0x7bc <__mulsf3_pse+0xa0>
 780:	88 23       	and	r24, r24
 782:	4a f0       	brmi	.+18     	; 0x796 <__mulsf3_pse+0x7a>
 784:	ee 0f       	add	r30, r30
 786:	ff 1f       	adc	r31, r31
 788:	bb 1f       	adc	r27, r27
 78a:	66 1f       	adc	r22, r22
 78c:	77 1f       	adc	r23, r23
 78e:	88 1f       	adc	r24, r24
 790:	91 50       	subi	r25, 0x01	; 1
 792:	50 40       	sbci	r21, 0x00	; 0
 794:	a9 f7       	brne	.-22     	; 0x780 <__mulsf3_pse+0x64>
 796:	9e 3f       	cpi	r25, 0xFE	; 254
 798:	51 05       	cpc	r21, r1
 79a:	80 f0       	brcs	.+32     	; 0x7bc <__mulsf3_pse+0xa0>
 79c:	0c 94 22 03 	jmp	0x644	; 0x644 <__fp_inf>
 7a0:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__fp_szero>
 7a4:	5f 3f       	cpi	r21, 0xFF	; 255
 7a6:	e4 f3       	brlt	.-8      	; 0x7a0 <__mulsf3_pse+0x84>
 7a8:	98 3e       	cpi	r25, 0xE8	; 232
 7aa:	d4 f3       	brlt	.-12     	; 0x7a0 <__mulsf3_pse+0x84>
 7ac:	86 95       	lsr	r24
 7ae:	77 95       	ror	r23
 7b0:	67 95       	ror	r22
 7b2:	b7 95       	ror	r27
 7b4:	f7 95       	ror	r31
 7b6:	e7 95       	ror	r30
 7b8:	9f 5f       	subi	r25, 0xFF	; 255
 7ba:	c1 f7       	brne	.-16     	; 0x7ac <__mulsf3_pse+0x90>
 7bc:	fe 2b       	or	r31, r30
 7be:	88 0f       	add	r24, r24
 7c0:	91 1d       	adc	r25, r1
 7c2:	96 95       	lsr	r25
 7c4:	87 95       	ror	r24
 7c6:	97 f9       	bld	r25, 7
 7c8:	08 95       	ret

000007ca <__fp_cmp>:
 7ca:	99 0f       	add	r25, r25
 7cc:	00 08       	sbc	r0, r0
 7ce:	55 0f       	add	r21, r21
 7d0:	aa 0b       	sbc	r26, r26
 7d2:	e0 e8       	ldi	r30, 0x80	; 128
 7d4:	fe ef       	ldi	r31, 0xFE	; 254
 7d6:	16 16       	cp	r1, r22
 7d8:	17 06       	cpc	r1, r23
 7da:	e8 07       	cpc	r30, r24
 7dc:	f9 07       	cpc	r31, r25
 7de:	c0 f0       	brcs	.+48     	; 0x810 <__fp_cmp+0x46>
 7e0:	12 16       	cp	r1, r18
 7e2:	13 06       	cpc	r1, r19
 7e4:	e4 07       	cpc	r30, r20
 7e6:	f5 07       	cpc	r31, r21
 7e8:	98 f0       	brcs	.+38     	; 0x810 <__fp_cmp+0x46>
 7ea:	62 1b       	sub	r22, r18
 7ec:	73 0b       	sbc	r23, r19
 7ee:	84 0b       	sbc	r24, r20
 7f0:	95 0b       	sbc	r25, r21
 7f2:	39 f4       	brne	.+14     	; 0x802 <__fp_cmp+0x38>
 7f4:	0a 26       	eor	r0, r26
 7f6:	61 f0       	breq	.+24     	; 0x810 <__fp_cmp+0x46>
 7f8:	23 2b       	or	r18, r19
 7fa:	24 2b       	or	r18, r20
 7fc:	25 2b       	or	r18, r21
 7fe:	21 f4       	brne	.+8      	; 0x808 <__fp_cmp+0x3e>
 800:	08 95       	ret
 802:	0a 26       	eor	r0, r26
 804:	09 f4       	brne	.+2      	; 0x808 <__fp_cmp+0x3e>
 806:	a1 40       	sbci	r26, 0x01	; 1
 808:	a6 95       	lsr	r26
 80a:	8f ef       	ldi	r24, 0xFF	; 255
 80c:	81 1d       	adc	r24, r1
 80e:	81 1d       	adc	r24, r1
 810:	08 95       	ret

00000812 <__tablejump2__>:
 812:	ee 0f       	add	r30, r30
 814:	ff 1f       	adc	r31, r31
 816:	05 90       	lpm	r0, Z+
 818:	f4 91       	lpm	r31, Z
 81a:	e0 2d       	mov	r30, r0
 81c:	09 94       	ijmp

0000081e <atoi>:
 81e:	fc 01       	movw	r30, r24
 820:	88 27       	eor	r24, r24
 822:	99 27       	eor	r25, r25
 824:	e8 94       	clt
 826:	21 91       	ld	r18, Z+
 828:	20 32       	cpi	r18, 0x20	; 32
 82a:	e9 f3       	breq	.-6      	; 0x826 <atoi+0x8>
 82c:	29 30       	cpi	r18, 0x09	; 9
 82e:	10 f0       	brcs	.+4      	; 0x834 <atoi+0x16>
 830:	2e 30       	cpi	r18, 0x0E	; 14
 832:	c8 f3       	brcs	.-14     	; 0x826 <atoi+0x8>
 834:	2b 32       	cpi	r18, 0x2B	; 43
 836:	41 f0       	breq	.+16     	; 0x848 <atoi+0x2a>
 838:	2d 32       	cpi	r18, 0x2D	; 45
 83a:	39 f4       	brne	.+14     	; 0x84a <atoi+0x2c>
 83c:	68 94       	set
 83e:	04 c0       	rjmp	.+8      	; 0x848 <atoi+0x2a>
 840:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__mulhi_const_10>
 844:	82 0f       	add	r24, r18
 846:	91 1d       	adc	r25, r1
 848:	21 91       	ld	r18, Z+
 84a:	20 53       	subi	r18, 0x30	; 48
 84c:	2a 30       	cpi	r18, 0x0A	; 10
 84e:	c0 f3       	brcs	.-16     	; 0x840 <atoi+0x22>
 850:	1e f4       	brtc	.+6      	; 0x858 <atoi+0x3a>
 852:	90 95       	com	r25
 854:	81 95       	neg	r24
 856:	9f 4f       	sbci	r25, 0xFF	; 255
 858:	08 95       	ret

0000085a <strtok>:
 85a:	4c ec       	ldi	r20, 0xCC	; 204
 85c:	55 e0       	ldi	r21, 0x05	; 5
 85e:	0e 94 32 04 	call	0x864	; 0x864 <strtok_r>
 862:	08 95       	ret

00000864 <strtok_r>:
 864:	fa 01       	movw	r30, r20
 866:	a1 91       	ld	r26, Z+
 868:	b0 81       	ld	r27, Z
 86a:	00 97       	sbiw	r24, 0x00	; 0
 86c:	19 f4       	brne	.+6      	; 0x874 <strtok_r+0x10>
 86e:	10 97       	sbiw	r26, 0x00	; 0
 870:	e1 f0       	breq	.+56     	; 0x8aa <strtok_r+0x46>
 872:	cd 01       	movw	r24, r26
 874:	dc 01       	movw	r26, r24
 876:	cd 01       	movw	r24, r26
 878:	0d 90       	ld	r0, X+
 87a:	00 20       	and	r0, r0
 87c:	11 f4       	brne	.+4      	; 0x882 <strtok_r+0x1e>
 87e:	c0 01       	movw	r24, r0
 880:	13 c0       	rjmp	.+38     	; 0x8a8 <strtok_r+0x44>
 882:	fb 01       	movw	r30, r22
 884:	21 91       	ld	r18, Z+
 886:	22 23       	and	r18, r18
 888:	19 f0       	breq	.+6      	; 0x890 <strtok_r+0x2c>
 88a:	20 15       	cp	r18, r0
 88c:	d9 f7       	brne	.-10     	; 0x884 <strtok_r+0x20>
 88e:	f3 cf       	rjmp	.-26     	; 0x876 <strtok_r+0x12>
 890:	fb 01       	movw	r30, r22
 892:	21 91       	ld	r18, Z+
 894:	20 15       	cp	r18, r0
 896:	19 f4       	brne	.+6      	; 0x89e <strtok_r+0x3a>
 898:	1e 92       	st	-X, r1
 89a:	11 96       	adiw	r26, 0x01	; 1
 89c:	06 c0       	rjmp	.+12     	; 0x8aa <strtok_r+0x46>
 89e:	22 23       	and	r18, r18
 8a0:	c1 f7       	brne	.-16     	; 0x892 <strtok_r+0x2e>
 8a2:	0d 90       	ld	r0, X+
 8a4:	00 20       	and	r0, r0
 8a6:	a1 f7       	brne	.-24     	; 0x890 <strtok_r+0x2c>
 8a8:	d0 01       	movw	r26, r0
 8aa:	fa 01       	movw	r30, r20
 8ac:	a1 93       	st	Z+, r26
 8ae:	b0 83       	st	Z, r27
 8b0:	08 95       	ret

000008b2 <__mulhi_const_10>:
 8b2:	7a e0       	ldi	r23, 0x0A	; 10
 8b4:	97 9f       	mul	r25, r23
 8b6:	90 2d       	mov	r25, r0
 8b8:	87 9f       	mul	r24, r23
 8ba:	80 2d       	mov	r24, r0
 8bc:	91 0d       	add	r25, r1
 8be:	11 24       	eor	r1, r1
 8c0:	08 95       	ret

000008c2 <_exit>:
 8c2:	f8 94       	cli

000008c4 <__stop_program>:
 8c4:	ff cf       	rjmp	.-2      	; 0x8c4 <__stop_program>
