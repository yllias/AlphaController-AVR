
AlphaController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004c6  00800100  000009b8  00000a4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004d  008005c6  008005c6  00000f12  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f12  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ef7  00000000  00000000  0000103c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000863  00000000  00000000  00001f33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000648  00000000  00000000  00002796  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00002de0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000595  00000000  00000000  00002f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001cf  00000000  00000000  00003511  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000036e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 9e 02 	jmp	0x53c	; 0x53c <__vector_1>
   8:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
   c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  10:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  14:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  18:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  1c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  20:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  24:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  28:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  2c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  30:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  34:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  38:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  3c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  40:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__vector_16>
  44:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  48:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  4c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  50:	0c 94 b9 02 	jmp	0x572	; 0x572 <__vector_20>
  54:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  58:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  5c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  60:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  68:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  6c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  70:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  74:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  78:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  7c:	3a 02       	muls	r19, r26
  7e:	34 02       	muls	r19, r20
  80:	85 01       	movw	r16, r10
  82:	76 01       	movw	r14, r12
  84:	2d 01       	movw	r4, r26
  86:	ad 00       	.word	0x00ad	; ????
  88:	67 01       	movw	r12, r14

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d0 e1       	ldi	r29, 0x10	; 16
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61

00000096 <__do_copy_data>:
  96:	15 e0       	ldi	r17, 0x05	; 5
  98:	a0 e0       	ldi	r26, 0x00	; 0
  9a:	b1 e0       	ldi	r27, 0x01	; 1
  9c:	e8 eb       	ldi	r30, 0xB8	; 184
  9e:	f9 e0       	ldi	r31, 0x09	; 9
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <__do_copy_data+0x10>
  a2:	05 90       	lpm	r0, Z+
  a4:	0d 92       	st	X+, r0
  a6:	a6 3c       	cpi	r26, 0xC6	; 198
  a8:	b1 07       	cpc	r27, r17
  aa:	d9 f7       	brne	.-10     	; 0xa2 <__do_copy_data+0xc>

000000ac <__do_clear_bss>:
  ac:	26 e0       	ldi	r18, 0x06	; 6
  ae:	a6 ec       	ldi	r26, 0xC6	; 198
  b0:	b5 e0       	ldi	r27, 0x05	; 5
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
  b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
  b6:	a3 31       	cpi	r26, 0x13	; 19
  b8:	b2 07       	cpc	r27, r18
  ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
  bc:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  c0:	0c 94 da 04 	jmp	0x9b4	; 0x9b4 <_exit>

000000c4 <__bad_interrupt>:
  c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c8 <main>:
}
void SSR3Coff () {
    PORTB &= ~(1<<PB4);		//clear PB0 aka.  set PB0 LOW
}
void Init_Int0() {
    EIMSK |= (1<<0);
  c8:	e8 9a       	sbi	0x1d, 0	; 29
    EICRA |= (1<<ISC00);
  ca:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
  ce:	81 60       	ori	r24, 0x01	; 1
  d0:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
}
void Init_Timer_0() {
    TCCR0A = (1<<WGM01);	//ctc mode
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	84 bd       	out	0x24, r24	; 36
    TCCR0B |= (1<<CS01);	//prescaler 8
  d8:	85 b5       	in	r24, 0x25	; 37
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	85 bd       	out	0x25, r24	; 37
    OCR0A = 0x63;			//fill OCR0A with 99 for 50us angle steps
  de:	83 e6       	ldi	r24, 0x63	; 99
  e0:	87 bd       	out	0x27, r24	; 39
    TIMSK0 |= (1<<1);		//enable compare interrupt
  e2:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
  e6:	82 60       	ori	r24, 0x02	; 2
  e8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
}
void USART_Init() {
    /* Set baud rate */
    UBRR0 = 25;
  ec:	89 e1       	ldi	r24, 0x19	; 25
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  f4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    /* Enable receiver and transmitter */
    UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
  f8:	88 e9       	ldi	r24, 0x98	; 152
  fa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    /* Set frame format: 8data, 1stop bit */
    UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
  fe:	86 e0       	ldi	r24, 0x06	; 6
 100:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    UCSR0C &= ~(1<<USBS0);
 104:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 108:	87 7f       	andi	r24, 0xF7	; 247
 10a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>

int main(void) {
    Init_Int0();
    Init_Timer_0();
    USART_Init();
    sei();
 10e:	78 94       	sei
    DDRB = 0xFF;
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	84 b9       	out	0x04, r24	; 4
    *Buffer = '\0';
}
void uart_sendc(char c) {
    while (!(UCSR0A & (1<<UDRE0))) { /* warten bis Senden moeglich */
    }
    UDR0 = c;                      /* sende Zeichen */
 114:	c2 e7       	ldi	r28, 0x72	; 114
    Init_Timer_0();
    USART_Init();
    sei();
    DDRB = 0xFF;
    while(1) {
        if (intCounter == 200) {
 116:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <intCounter>
 11a:	90 91 cf 05 	lds	r25, 0x05CF	; 0x8005cf <intCounter+0x1>
 11e:	88 3c       	cpi	r24, 0xC8	; 200
 120:	91 05       	cpc	r25, r1
 122:	09 f4       	brne	.+2      	; 0x126 <main+0x5e>
 124:	6d c0       	rjmp	.+218    	; 0x200 <main+0x138>
            intCounter = 0;
            uart_sendc('r'); //Request Control Values
        }
        if(uartFlag == 1 && uartBuffer != '#') {
 126:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <uartFlag>
 12a:	90 91 c9 05 	lds	r25, 0x05C9	; 0x8005c9 <uartFlag+0x1>
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	09 f4       	brne	.+2      	; 0x134 <main+0x6c>
 132:	77 c0       	rjmp	.+238    	; 0x222 <main+0x15a>
            input[bufferIdx] = uartBuffer;
            bufferIdx++;
            uartFlag = 0;
        } else if (uartFlag == 1 && uartBuffer == '#') {
 134:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <uartFlag>
 138:	90 91 c9 05 	lds	r25, 0x05C9	; 0x8005c9 <uartFlag+0x1>
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	09 f4       	brne	.+2      	; 0x142 <main+0x7a>
 140:	9f c1       	rjmp	.+830    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
            token = strtok(0, "-");
            ctrlVal3 = atoi(token);
            bufferIdx = 0;
            uartFlag = 0;
        }
        switch(mode) {
 142:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <mode>
 146:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <mode+0x1>
 14a:	31 97       	sbiw	r30, 0x01	; 1
 14c:	e7 30       	cpi	r30, 0x07	; 7
 14e:	f1 05       	cpc	r31, r1
 150:	10 f7       	brcc	.-60     	; 0x116 <main+0x4e>
 152:	e2 5c       	subi	r30, 0xC2	; 194
 154:	ff 4f       	sbci	r31, 0xFF	; 255
 156:	0c 94 82 04 	jmp	0x904	; 0x904 <__tablejump2__>
            } else {
                SSR1off();
            }
            break;
        case 6: //burst fire low momentum //WORKING
            if(intCounter+1 > 2*ctrlVal1) {
 15a:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <ctrlVal1>
 15e:	90 91 d5 05 	lds	r25, 0x05D5	; 0x8005d5 <ctrlVal1+0x1>
 162:	20 91 ce 05 	lds	r18, 0x05CE	; 0x8005ce <intCounter>
 166:	30 91 cf 05 	lds	r19, 0x05CF	; 0x8005cf <intCounter+0x1>
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	28 17       	cp	r18, r24
 170:	39 07       	cpc	r19, r25
 172:	0c f4       	brge	.+2      	; 0x176 <main+0xae>
 174:	e1 c1       	rjmp	.+962    	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
/* puts ist unabhaengig vom Controllertyp */
void SSR1on () {
    PORTB |= (1<<PB0);		//set PB0 HIGH
}
void SSR1off () {
    PORTB &= ~(1<<PB0);		//clear PB0 aka.  set PB0 LOW
 176:	28 98       	cbi	0x05, 0	; 5
            if(intCounter+1 > 2*ctrlVal1) {
                SSR1off();
            } else {
                SSR1on();
            }
            if(intCounter+1 > 2*ctrlVal2) {
 178:	80 91 d2 05 	lds	r24, 0x05D2	; 0x8005d2 <ctrlVal2>
 17c:	90 91 d3 05 	lds	r25, 0x05D3	; 0x8005d3 <ctrlVal2+0x1>
 180:	20 91 ce 05 	lds	r18, 0x05CE	; 0x8005ce <intCounter>
 184:	30 91 cf 05 	lds	r19, 0x05CF	; 0x8005cf <intCounter+0x1>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	28 17       	cp	r18, r24
 18e:	39 07       	cpc	r19, r25
 190:	0c f4       	brge	.+2      	; 0x194 <main+0xcc>
 192:	d0 c1       	rjmp	.+928    	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
}
void SSR2on () {
    PORTB |= (1<<PB1);		//set PB0 HIGH
}
void SSR2off () {
    PORTB &= ~(1<<PB1);		//clear PB0 aka.  set PB0 LOW
 194:	29 98       	cbi	0x05, 1	; 5
            if(intCounter+1 > 2*ctrlVal2) {
                SSR2off();
            } else {
                SSR2on();
            }
            if(intCounter+1 > 2*ctrlVal3) {
 196:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <ctrlVal3>
 19a:	90 91 d1 05 	lds	r25, 0x05D1	; 0x8005d1 <ctrlVal3+0x1>
 19e:	20 91 ce 05 	lds	r18, 0x05CE	; 0x8005ce <intCounter>
 1a2:	30 91 cf 05 	lds	r19, 0x05CF	; 0x8005cf <intCounter+0x1>
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	28 17       	cp	r18, r24
 1ac:	39 07       	cpc	r19, r25
 1ae:	0c f4       	brge	.+2      	; 0x1b2 <main+0xea>
 1b0:	bf c1       	rjmp	.+894    	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
}
void SSR3Aon () {
    PORTB |= (1<<PB2);		//set PB0 HIGH
}
void SSR3Aoff () {
    PORTB &= ~(1<<PB2);		//clear PB0 aka.  set PB0 LOW
 1b2:	2a 98       	cbi	0x05, 2	; 5
            if(intCounter+1 > 2*ctrlVal3) {
                SSR3Aoff();
            } else {
                SSR3Aon();
            }
            if(intCounterPhaseA+1 > 2*ctrlVal3) {
 1b4:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <ctrlVal3>
 1b8:	90 91 d1 05 	lds	r25, 0x05D1	; 0x8005d1 <ctrlVal3+0x1>
 1bc:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <intCounterPhaseA>
 1c0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <intCounterPhaseA+0x1>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	28 17       	cp	r18, r24
 1ca:	39 07       	cpc	r19, r25
 1cc:	0c f4       	brge	.+2      	; 0x1d0 <main+0x108>
 1ce:	ae c1       	rjmp	.+860    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
}
void SSR3Bon () {
    PORTB |= (1<<PB3);		//set PB0 HIGH
}
void SSR3Boff () {
    PORTB &= ~(1<<PB3);		//clear PB0 aka.  set PB0 LOW
 1d0:	2b 98       	cbi	0x05, 3	; 5
            if(intCounterPhaseA+1 > 2*ctrlVal3) {
                SSR3Boff();
            } else {
                SSR3Bon();
            }
            if(intCounterPhaseB+1 > 2*ctrlVal3) {
 1d2:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <ctrlVal3>
 1d6:	90 91 d1 05 	lds	r25, 0x05D1	; 0x8005d1 <ctrlVal3+0x1>
 1da:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 1de:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	28 17       	cp	r18, r24
 1e8:	39 07       	cpc	r19, r25
 1ea:	0c f4       	brge	.+2      	; 0x1ee <main+0x126>
 1ec:	97 c1       	rjmp	.+814    	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
}
void SSR3Con () {
    PORTB |= (1<<PB4);		//set PB0 HIGH
}
void SSR3Coff () {
    PORTB &= ~(1<<PB4);		//clear PB0 aka.  set PB0 LOW
 1ee:	2c 98       	cbi	0x05, 4	; 5
    Init_Timer_0();
    USART_Init();
    sei();
    DDRB = 0xFF;
    while(1) {
        if (intCounter == 200) {
 1f0:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <intCounter>
 1f4:	90 91 cf 05 	lds	r25, 0x05CF	; 0x8005cf <intCounter+0x1>
 1f8:	88 3c       	cpi	r24, 0xC8	; 200
 1fa:	91 05       	cpc	r25, r1
 1fc:	09 f0       	breq	.+2      	; 0x200 <main+0x138>
 1fe:	93 cf       	rjmp	.-218    	; 0x126 <main+0x5e>
            intCounter = 0;
 200:	10 92 cf 05 	sts	0x05CF, r1	; 0x8005cf <intCounter+0x1>
 204:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <intCounter>
    // Noch ein '\0' anh?ngen um einen Standard
    // C-String daraus zu machen
    *Buffer = '\0';
}
void uart_sendc(char c) {
    while (!(UCSR0A & (1<<UDRE0))) { /* warten bis Senden moeglich */
 208:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 20c:	85 ff       	sbrs	r24, 5
 20e:	fc cf       	rjmp	.-8      	; 0x208 <main+0x140>
    }
    UDR0 = c;                      /* sende Zeichen */
 210:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    while(1) {
        if (intCounter == 200) {
            intCounter = 0;
            uart_sendc('r'); //Request Control Values
        }
        if(uartFlag == 1 && uartBuffer != '#') {
 214:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <uartFlag>
 218:	90 91 c9 05 	lds	r25, 0x05C9	; 0x8005c9 <uartFlag+0x1>
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	09 f0       	breq	.+2      	; 0x222 <main+0x15a>
 220:	89 cf       	rjmp	.-238    	; 0x134 <main+0x6c>
 222:	80 91 12 06 	lds	r24, 0x0612	; 0x800612 <uartBuffer>
 226:	83 32       	cpi	r24, 0x23	; 35
 228:	09 f4       	brne	.+2      	; 0x22c <main+0x164>
 22a:	84 cf       	rjmp	.-248    	; 0x134 <main+0x6c>
            input[bufferIdx] = uartBuffer;
 22c:	e0 91 ca 05 	lds	r30, 0x05CA	; 0x8005ca <bufferIdx>
 230:	f0 91 cb 05 	lds	r31, 0x05CB	; 0x8005cb <bufferIdx+0x1>
 234:	80 91 12 06 	lds	r24, 0x0612	; 0x800612 <uartBuffer>
 238:	ea 52       	subi	r30, 0x2A	; 42
 23a:	fa 4f       	sbci	r31, 0xFA	; 250
 23c:	80 83       	st	Z, r24
            bufferIdx++;
 23e:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <bufferIdx>
 242:	90 91 cb 05 	lds	r25, 0x05CB	; 0x8005cb <bufferIdx+0x1>
 246:	01 96       	adiw	r24, 0x01	; 1
 248:	90 93 cb 05 	sts	0x05CB, r25	; 0x8005cb <bufferIdx+0x1>
 24c:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <bufferIdx>
            uartFlag = 0;
 250:	10 92 c9 05 	sts	0x05C9, r1	; 0x8005c9 <uartFlag+0x1>
 254:	10 92 c8 05 	sts	0x05C8, r1	; 0x8005c8 <uartFlag>
 258:	74 cf       	rjmp	.-280    	; 0x142 <main+0x7a>
            } else {
                SSR1off();
            }
            break;
        case 5: //phase angle effective voltage //WORKING
            if(timerCounter+1 > (fireAngleTableV[ctrlVal1]*netzT)/50) {
 25a:	60 91 cc 05 	lds	r22, 0x05CC	; 0x8005cc <timerCounter>
 25e:	70 91 cd 05 	lds	r23, 0x05CD	; 0x8005cd <timerCounter+0x1>
 262:	e0 91 d4 05 	lds	r30, 0x05D4	; 0x8005d4 <ctrlVal1>
 266:	f0 91 d5 05 	lds	r31, 0x05D5	; 0x8005d5 <ctrlVal1+0x1>
 26a:	ee 0f       	add	r30, r30
 26c:	ff 1f       	adc	r31, r31
 26e:	ee 0f       	add	r30, r30
 270:	ff 1f       	adc	r31, r31
 272:	e4 56       	subi	r30, 0x64	; 100
 274:	fd 4f       	sbci	r31, 0xFD	; 253
 276:	c0 80       	ld	r12, Z
 278:	d1 80       	ldd	r13, Z+1	; 0x01
 27a:	e2 80       	ldd	r14, Z+2	; 0x02
 27c:	f3 80       	ldd	r15, Z+3	; 0x03
 27e:	6f 5f       	subi	r22, 0xFF	; 255
 280:	7f 4f       	sbci	r23, 0xFF	; 255
 282:	07 2e       	mov	r0, r23
 284:	00 0c       	add	r0, r0
 286:	88 0b       	sbc	r24, r24
 288:	99 0b       	sbc	r25, r25
 28a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__floatsisf>
 28e:	4b 01       	movw	r8, r22
 290:	5c 01       	movw	r10, r24
 292:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <netzT>
 296:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <netzT+0x1>
 29a:	07 2e       	mov	r0, r23
 29c:	00 0c       	add	r0, r0
 29e:	88 0b       	sbc	r24, r24
 2a0:	99 0b       	sbc	r25, r25
 2a2:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__floatsisf>
 2a6:	a7 01       	movw	r20, r14
 2a8:	96 01       	movw	r18, r12
 2aa:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__mulsf3>
 2ae:	20 e0       	ldi	r18, 0x00	; 0
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	48 e4       	ldi	r20, 0x48	; 72
 2b4:	52 e4       	ldi	r21, 0x42	; 66
 2b6:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__divsf3>
 2ba:	9b 01       	movw	r18, r22
 2bc:	ac 01       	movw	r20, r24
 2be:	c5 01       	movw	r24, r10
 2c0:	b4 01       	movw	r22, r8
 2c2:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__gesf2>
 2c6:	18 16       	cp	r1, r24
 2c8:	7c f4       	brge	.+30     	; 0x2e8 <main+0x220>
    }
    UDR0 = c;                      /* sende Zeichen */
}
/* puts ist unabhaengig vom Controllertyp */
void SSR1on () {
    PORTB |= (1<<PB0);		//set PB0 HIGH
 2ca:	28 9a       	sbi	0x05, 0	; 5
 2cc:	24 cf       	rjmp	.-440    	; 0x116 <main+0x4e>
            } else {
                SSR3Con();
            }
            break;
        case 7: //burst fire high momentum
            if(intCounter+1 > 2*ctrlVal1) {
 2ce:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <ctrlVal1>
 2d2:	90 91 d5 05 	lds	r25, 0x05D5	; 0x8005d5 <ctrlVal1+0x1>
 2d6:	20 91 ce 05 	lds	r18, 0x05CE	; 0x8005ce <intCounter>
 2da:	30 91 cf 05 	lds	r19, 0x05CF	; 0x8005cf <intCounter+0x1>
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	28 17       	cp	r18, r24
 2e4:	39 07       	cpc	r19, r25
 2e6:	8c f7       	brge	.-30     	; 0x2ca <main+0x202>
/* puts ist unabhaengig vom Controllertyp */
void SSR1on () {
    PORTB |= (1<<PB0);		//set PB0 HIGH
}
void SSR1off () {
    PORTB &= ~(1<<PB0);		//clear PB0 aka.  set PB0 LOW
 2e8:	28 98       	cbi	0x05, 0	; 5
 2ea:	15 cf       	rjmp	.-470    	; 0x116 <main+0x4e>
            } else {
                PORTB &= ~(1<<PB2);
            }
            break;
        case 4: //phase angle power	//WORKING
            if(timerCounter+1 > (fireAngleTableP[ctrlVal1]*netzT)/50) {
 2ec:	60 91 cc 05 	lds	r22, 0x05CC	; 0x8005cc <timerCounter>
 2f0:	70 91 cd 05 	lds	r23, 0x05CD	; 0x8005cd <timerCounter+0x1>
 2f4:	e0 91 d4 05 	lds	r30, 0x05D4	; 0x8005d4 <ctrlVal1>
 2f8:	f0 91 d5 05 	lds	r31, 0x05D5	; 0x8005d5 <ctrlVal1+0x1>
 2fc:	ee 0f       	add	r30, r30
 2fe:	ff 1f       	adc	r31, r31
 300:	ee 0f       	add	r30, r30
 302:	ff 1f       	adc	r31, r31
 304:	e8 5f       	subi	r30, 0xF8	; 248
 306:	fe 4f       	sbci	r31, 0xFE	; 254
 308:	b6 cf       	rjmp	.-148    	; 0x276 <main+0x1ae>
            SSR3Aon();
            SSR3Bon();
            SSR3Con();
            break;
        case 3: //uncorrected phase angle //WORKING
            if(timerCounter+1 > (fireAngleTable[ctrlVal1]*netzT)/50) {
 30a:	60 91 cc 05 	lds	r22, 0x05CC	; 0x8005cc <timerCounter>
 30e:	70 91 cd 05 	lds	r23, 0x05CD	; 0x8005cd <timerCounter+0x1>
 312:	e0 91 d4 05 	lds	r30, 0x05D4	; 0x8005d4 <ctrlVal1>
 316:	f0 91 d5 05 	lds	r31, 0x05D5	; 0x8005d5 <ctrlVal1+0x1>
 31a:	ee 0f       	add	r30, r30
 31c:	ff 1f       	adc	r31, r31
 31e:	ee 0f       	add	r30, r30
 320:	ff 1f       	adc	r31, r31
 322:	e0 5d       	subi	r30, 0xD0	; 208
 324:	fb 4f       	sbci	r31, 0xFB	; 251
 326:	c0 80       	ld	r12, Z
 328:	d1 80       	ldd	r13, Z+1	; 0x01
 32a:	e2 80       	ldd	r14, Z+2	; 0x02
 32c:	f3 80       	ldd	r15, Z+3	; 0x03
 32e:	6f 5f       	subi	r22, 0xFF	; 255
 330:	7f 4f       	sbci	r23, 0xFF	; 255
 332:	07 2e       	mov	r0, r23
 334:	00 0c       	add	r0, r0
 336:	88 0b       	sbc	r24, r24
 338:	99 0b       	sbc	r25, r25
 33a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__floatsisf>
 33e:	4b 01       	movw	r8, r22
 340:	5c 01       	movw	r10, r24
 342:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <netzT>
 346:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <netzT+0x1>
 34a:	07 2e       	mov	r0, r23
 34c:	00 0c       	add	r0, r0
 34e:	88 0b       	sbc	r24, r24
 350:	99 0b       	sbc	r25, r25
 352:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__floatsisf>
 356:	a7 01       	movw	r20, r14
 358:	96 01       	movw	r18, r12
 35a:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__mulsf3>
 35e:	20 e0       	ldi	r18, 0x00	; 0
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	48 e4       	ldi	r20, 0x48	; 72
 364:	52 e4       	ldi	r21, 0x42	; 66
 366:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__divsf3>
 36a:	9b 01       	movw	r18, r22
 36c:	ac 01       	movw	r20, r24
 36e:	c5 01       	movw	r24, r10
 370:	b4 01       	movw	r22, r8
 372:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__gesf2>
 376:	18 16       	cp	r1, r24
 378:	0c f0       	brlt	.+2      	; 0x37c <main+0x2b4>
 37a:	d6 c0       	rjmp	.+428    	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
                //SSR1on();
                PORTB |= (1<<PB0);
 37c:	28 9a       	sbi	0x05, 0	; 5
            } else {
                //SSR1off();
                PORTB &= ~(1<<PB0);
            }
            if(timerCounter+1 > (fireAngleTable[ctrlVal2]*netzT)/50) {
 37e:	60 91 cc 05 	lds	r22, 0x05CC	; 0x8005cc <timerCounter>
 382:	70 91 cd 05 	lds	r23, 0x05CD	; 0x8005cd <timerCounter+0x1>
 386:	e0 91 d2 05 	lds	r30, 0x05D2	; 0x8005d2 <ctrlVal2>
 38a:	f0 91 d3 05 	lds	r31, 0x05D3	; 0x8005d3 <ctrlVal2+0x1>
 38e:	ee 0f       	add	r30, r30
 390:	ff 1f       	adc	r31, r31
 392:	ee 0f       	add	r30, r30
 394:	ff 1f       	adc	r31, r31
 396:	e0 5d       	subi	r30, 0xD0	; 208
 398:	fb 4f       	sbci	r31, 0xFB	; 251
 39a:	c0 80       	ld	r12, Z
 39c:	d1 80       	ldd	r13, Z+1	; 0x01
 39e:	e2 80       	ldd	r14, Z+2	; 0x02
 3a0:	f3 80       	ldd	r15, Z+3	; 0x03
 3a2:	6f 5f       	subi	r22, 0xFF	; 255
 3a4:	7f 4f       	sbci	r23, 0xFF	; 255
 3a6:	07 2e       	mov	r0, r23
 3a8:	00 0c       	add	r0, r0
 3aa:	88 0b       	sbc	r24, r24
 3ac:	99 0b       	sbc	r25, r25
 3ae:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__floatsisf>
 3b2:	4b 01       	movw	r8, r22
 3b4:	5c 01       	movw	r10, r24
 3b6:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <netzT>
 3ba:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <netzT+0x1>
 3be:	07 2e       	mov	r0, r23
 3c0:	00 0c       	add	r0, r0
 3c2:	88 0b       	sbc	r24, r24
 3c4:	99 0b       	sbc	r25, r25
 3c6:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__floatsisf>
 3ca:	a7 01       	movw	r20, r14
 3cc:	96 01       	movw	r18, r12
 3ce:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__mulsf3>
 3d2:	20 e0       	ldi	r18, 0x00	; 0
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	48 e4       	ldi	r20, 0x48	; 72
 3d8:	52 e4       	ldi	r21, 0x42	; 66
 3da:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__divsf3>
 3de:	9b 01       	movw	r18, r22
 3e0:	ac 01       	movw	r20, r24
 3e2:	c5 01       	movw	r24, r10
 3e4:	b4 01       	movw	r22, r8
 3e6:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__gesf2>
 3ea:	18 16       	cp	r1, r24
 3ec:	0c f0       	brlt	.+2      	; 0x3f0 <main+0x328>
 3ee:	9a c0       	rjmp	.+308    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
                PORTB |= (1<<PB1);
 3f0:	29 9a       	sbi	0x05, 1	; 5
            } else {
                PORTB &= ~(1<<PB1);
            }
            if(timerCounter+1 > (fireAngleTable[ctrlVal3]*netzT)/50) {
 3f2:	60 91 cc 05 	lds	r22, 0x05CC	; 0x8005cc <timerCounter>
 3f6:	70 91 cd 05 	lds	r23, 0x05CD	; 0x8005cd <timerCounter+0x1>
 3fa:	e0 91 d0 05 	lds	r30, 0x05D0	; 0x8005d0 <ctrlVal3>
 3fe:	f0 91 d1 05 	lds	r31, 0x05D1	; 0x8005d1 <ctrlVal3+0x1>
 402:	ee 0f       	add	r30, r30
 404:	ff 1f       	adc	r31, r31
 406:	ee 0f       	add	r30, r30
 408:	ff 1f       	adc	r31, r31
 40a:	e0 5d       	subi	r30, 0xD0	; 208
 40c:	fb 4f       	sbci	r31, 0xFB	; 251
 40e:	c0 80       	ld	r12, Z
 410:	d1 80       	ldd	r13, Z+1	; 0x01
 412:	e2 80       	ldd	r14, Z+2	; 0x02
 414:	f3 80       	ldd	r15, Z+3	; 0x03
 416:	6f 5f       	subi	r22, 0xFF	; 255
 418:	7f 4f       	sbci	r23, 0xFF	; 255
 41a:	07 2e       	mov	r0, r23
 41c:	00 0c       	add	r0, r0
 41e:	88 0b       	sbc	r24, r24
 420:	99 0b       	sbc	r25, r25
 422:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__floatsisf>
 426:	4b 01       	movw	r8, r22
 428:	5c 01       	movw	r10, r24
 42a:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <netzT>
 42e:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <netzT+0x1>
 432:	07 2e       	mov	r0, r23
 434:	00 0c       	add	r0, r0
 436:	88 0b       	sbc	r24, r24
 438:	99 0b       	sbc	r25, r25
 43a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__floatsisf>
 43e:	a7 01       	movw	r20, r14
 440:	96 01       	movw	r18, r12
 442:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__mulsf3>
 446:	20 e0       	ldi	r18, 0x00	; 0
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	48 e4       	ldi	r20, 0x48	; 72
 44c:	52 e4       	ldi	r21, 0x42	; 66
 44e:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__divsf3>
 452:	9b 01       	movw	r18, r22
 454:	ac 01       	movw	r20, r24
 456:	c5 01       	movw	r24, r10
 458:	b4 01       	movw	r22, r8
 45a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__gesf2>
 45e:	18 16       	cp	r1, r24
 460:	0c f0       	brlt	.+2      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 462:	5e c0       	rjmp	.+188    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
                PORTB |= (1<<PB2);
 464:	2a 9a       	sbi	0x05, 2	; 5
 466:	57 ce       	rjmp	.-850    	; 0x116 <main+0x4e>
    }
    UDR0 = c;                      /* sende Zeichen */
}
/* puts ist unabhaengig vom Controllertyp */
void SSR1on () {
    PORTB |= (1<<PB0);		//set PB0 HIGH
 468:	28 9a       	sbi	0x05, 0	; 5
}
void SSR1off () {
    PORTB &= ~(1<<PB0);		//clear PB0 aka.  set PB0 LOW
}
void SSR2on () {
    PORTB |= (1<<PB1);		//set PB0 HIGH
 46a:	29 9a       	sbi	0x05, 1	; 5
}
void SSR2off () {
    PORTB &= ~(1<<PB1);		//clear PB0 aka.  set PB0 LOW
}
void SSR3Aon () {
    PORTB |= (1<<PB2);		//set PB0 HIGH
 46c:	2a 9a       	sbi	0x05, 2	; 5
}
void SSR3Aoff () {
    PORTB &= ~(1<<PB2);		//clear PB0 aka.  set PB0 LOW
}
void SSR3Bon () {
    PORTB |= (1<<PB3);		//set PB0 HIGH
 46e:	2b 9a       	sbi	0x05, 3	; 5
}
void SSR3Boff () {
    PORTB &= ~(1<<PB3);		//clear PB0 aka.  set PB0 LOW
}
void SSR3Con () {
    PORTB |= (1<<PB4);		//set PB0 HIGH
 470:	2c 9a       	sbi	0x05, 4	; 5
 472:	51 ce       	rjmp	.-862    	; 0x116 <main+0x4e>
/* puts ist unabhaengig vom Controllertyp */
void SSR1on () {
    PORTB |= (1<<PB0);		//set PB0 HIGH
}
void SSR1off () {
    PORTB &= ~(1<<PB0);		//clear PB0 aka.  set PB0 LOW
 474:	28 98       	cbi	0x05, 0	; 5
}
void SSR2on () {
    PORTB |= (1<<PB1);		//set PB0 HIGH
}
void SSR2off () {
    PORTB &= ~(1<<PB1);		//clear PB0 aka.  set PB0 LOW
 476:	29 98       	cbi	0x05, 1	; 5
}
void SSR3Aon () {
    PORTB |= (1<<PB2);		//set PB0 HIGH
}
void SSR3Aoff () {
    PORTB &= ~(1<<PB2);		//clear PB0 aka.  set PB0 LOW
 478:	2a 98       	cbi	0x05, 2	; 5
}
void SSR3Bon () {
    PORTB |= (1<<PB3);		//set PB0 HIGH
}
void SSR3Boff () {
    PORTB &= ~(1<<PB3);		//clear PB0 aka.  set PB0 LOW
 47a:	2b 98       	cbi	0x05, 3	; 5
}
void SSR3Con () {
    PORTB |= (1<<PB4);		//set PB0 HIGH
}
void SSR3Coff () {
    PORTB &= ~(1<<PB4);		//clear PB0 aka.  set PB0 LOW
 47c:	2c 98       	cbi	0x05, 4	; 5
 47e:	4b ce       	rjmp	.-874    	; 0x116 <main+0x4e>
        }
        if(uartFlag == 1 && uartBuffer != '#') {
            input[bufferIdx] = uartBuffer;
            bufferIdx++;
            uartFlag = 0;
        } else if (uartFlag == 1 && uartBuffer == '#') {
 480:	80 91 12 06 	lds	r24, 0x0612	; 0x800612 <uartBuffer>
 484:	83 32       	cpi	r24, 0x23	; 35
 486:	09 f0       	breq	.+2      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 488:	5c ce       	rjmp	.-840    	; 0x142 <main+0x7a>
            bufferIdx++;
 48a:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <bufferIdx>
 48e:	90 91 cb 05 	lds	r25, 0x05CB	; 0x8005cb <bufferIdx+0x1>
 492:	01 96       	adiw	r24, 0x01	; 1
 494:	90 93 cb 05 	sts	0x05CB, r25	; 0x8005cb <bufferIdx+0x1>
 498:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <bufferIdx>
            input[bufferIdx] = '\0';
 49c:	e0 91 ca 05 	lds	r30, 0x05CA	; 0x8005ca <bufferIdx>
 4a0:	f0 91 cb 05 	lds	r31, 0x05CB	; 0x8005cb <bufferIdx+0x1>
 4a4:	ea 52       	subi	r30, 0x2A	; 42
 4a6:	fa 4f       	sbci	r31, 0xFA	; 250
 4a8:	10 82       	st	Z, r1
            char* token = strtok(input, "-");
 4aa:	64 ec       	ldi	r22, 0xC4	; 196
 4ac:	75 e0       	ldi	r23, 0x05	; 5
 4ae:	86 ed       	ldi	r24, 0xD6	; 214
 4b0:	95 e0       	ldi	r25, 0x05	; 5
 4b2:	0e 94 a6 04 	call	0x94c	; 0x94c <strtok>
            mode = atoi(token);
 4b6:	0e 94 88 04 	call	0x910	; 0x910 <atoi>
 4ba:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <mode+0x1>
 4be:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <mode>
            token = strtok(0, "-");
 4c2:	64 ec       	ldi	r22, 0xC4	; 196
 4c4:	75 e0       	ldi	r23, 0x05	; 5
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	0e 94 a6 04 	call	0x94c	; 0x94c <strtok>
            ctrlVal1 = atoi(token);
 4ce:	0e 94 88 04 	call	0x910	; 0x910 <atoi>
 4d2:	90 93 d5 05 	sts	0x05D5, r25	; 0x8005d5 <ctrlVal1+0x1>
 4d6:	80 93 d4 05 	sts	0x05D4, r24	; 0x8005d4 <ctrlVal1>
            token = strtok(0, "-");
 4da:	64 ec       	ldi	r22, 0xC4	; 196
 4dc:	75 e0       	ldi	r23, 0x05	; 5
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	0e 94 a6 04 	call	0x94c	; 0x94c <strtok>
            ctrlVal2 = atoi(token);
 4e6:	0e 94 88 04 	call	0x910	; 0x910 <atoi>
 4ea:	90 93 d3 05 	sts	0x05D3, r25	; 0x8005d3 <ctrlVal2+0x1>
 4ee:	80 93 d2 05 	sts	0x05D2, r24	; 0x8005d2 <ctrlVal2>
            token = strtok(0, "-");
 4f2:	64 ec       	ldi	r22, 0xC4	; 196
 4f4:	75 e0       	ldi	r23, 0x05	; 5
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	0e 94 a6 04 	call	0x94c	; 0x94c <strtok>
            ctrlVal3 = atoi(token);
 4fe:	0e 94 88 04 	call	0x910	; 0x910 <atoi>
 502:	90 93 d1 05 	sts	0x05D1, r25	; 0x8005d1 <ctrlVal3+0x1>
 506:	80 93 d0 05 	sts	0x05D0, r24	; 0x8005d0 <ctrlVal3>
            bufferIdx = 0;
 50a:	10 92 cb 05 	sts	0x05CB, r1	; 0x8005cb <bufferIdx+0x1>
 50e:	10 92 ca 05 	sts	0x05CA, r1	; 0x8005ca <bufferIdx>
            uartFlag = 0;
 512:	10 92 c9 05 	sts	0x05C9, r1	; 0x8005c9 <uartFlag+0x1>
 516:	10 92 c8 05 	sts	0x05C8, r1	; 0x8005c8 <uartFlag>
 51a:	13 ce       	rjmp	.-986    	; 0x142 <main+0x7a>
}
void SSR3Boff () {
    PORTB &= ~(1<<PB3);		//clear PB0 aka.  set PB0 LOW
}
void SSR3Con () {
    PORTB |= (1<<PB4);		//set PB0 HIGH
 51c:	2c 9a       	sbi	0x05, 4	; 5
 51e:	fb cd       	rjmp	.-1034   	; 0x116 <main+0x4e>
                PORTB &= ~(1<<PB1);
            }
            if(timerCounter+1 > (fireAngleTable[ctrlVal3]*netzT)/50) {
                PORTB |= (1<<PB2);
            } else {
                PORTB &= ~(1<<PB2);
 520:	2a 98       	cbi	0x05, 2	; 5
 522:	f9 cd       	rjmp	.-1038   	; 0x116 <main+0x4e>
                PORTB &= ~(1<<PB0);
            }
            if(timerCounter+1 > (fireAngleTable[ctrlVal2]*netzT)/50) {
                PORTB |= (1<<PB1);
            } else {
                PORTB &= ~(1<<PB1);
 524:	29 98       	cbi	0x05, 1	; 5
 526:	65 cf       	rjmp	.-310    	; 0x3f2 <main+0x32a>
            if(timerCounter+1 > (fireAngleTable[ctrlVal1]*netzT)/50) {
                //SSR1on();
                PORTB |= (1<<PB0);
            } else {
                //SSR1off();
                PORTB &= ~(1<<PB0);
 528:	28 98       	cbi	0x05, 0	; 5
 52a:	29 cf       	rjmp	.-430    	; 0x37e <main+0x2b6>
}
void SSR3Aoff () {
    PORTB &= ~(1<<PB2);		//clear PB0 aka.  set PB0 LOW
}
void SSR3Bon () {
    PORTB |= (1<<PB3);		//set PB0 HIGH
 52c:	2b 9a       	sbi	0x05, 3	; 5
 52e:	51 ce       	rjmp	.-862    	; 0x1d2 <main+0x10a>
}
void SSR2off () {
    PORTB &= ~(1<<PB1);		//clear PB0 aka.  set PB0 LOW
}
void SSR3Aon () {
    PORTB |= (1<<PB2);		//set PB0 HIGH
 530:	2a 9a       	sbi	0x05, 2	; 5
 532:	40 ce       	rjmp	.-896    	; 0x1b4 <main+0xec>
}
void SSR1off () {
    PORTB &= ~(1<<PB0);		//clear PB0 aka.  set PB0 LOW
}
void SSR2on () {
    PORTB |= (1<<PB1);		//set PB0 HIGH
 534:	29 9a       	sbi	0x05, 1	; 5
 536:	2f ce       	rjmp	.-930    	; 0x196 <main+0xce>
    }
    UDR0 = c;                      /* sende Zeichen */
}
/* puts ist unabhaengig vom Controllertyp */
void SSR1on () {
    PORTB |= (1<<PB0);		//set PB0 HIGH
 538:	28 9a       	sbi	0x05, 0	; 5
 53a:	1e ce       	rjmp	.-964    	; 0x178 <main+0xb0>

0000053c <__vector_1>:
            }
            break;
        }
    }
}
ISR (INT0_vect) {
 53c:	1f 92       	push	r1
 53e:	0f 92       	push	r0
 540:	0f b6       	in	r0, 0x3f	; 63
 542:	0f 92       	push	r0
 544:	11 24       	eor	r1, r1
 546:	8f 93       	push	r24
 548:	9f 93       	push	r25
    timerCounter = 0;
 54a:	10 92 cd 05 	sts	0x05CD, r1	; 0x8005cd <timerCounter+0x1>
 54e:	10 92 cc 05 	sts	0x05CC, r1	; 0x8005cc <timerCounter>
    intCounter++;
 552:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <intCounter>
 556:	90 91 cf 05 	lds	r25, 0x05CF	; 0x8005cf <intCounter+0x1>
 55a:	01 96       	adiw	r24, 0x01	; 1
 55c:	90 93 cf 05 	sts	0x05CF, r25	; 0x8005cf <intCounter+0x1>
 560:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <intCounter>
        intCounterPhaseA = 0;
    }
    if (intCounterPhaseB == 200) {
        intCounterPhaseB = 0;
    }*/
}
 564:	9f 91       	pop	r25
 566:	8f 91       	pop	r24
 568:	0f 90       	pop	r0
 56a:	0f be       	out	0x3f, r0	; 63
 56c:	0f 90       	pop	r0
 56e:	1f 90       	pop	r1
 570:	18 95       	reti

00000572 <__vector_20>:
ISR(USART0_RX_vect) { //Wenn empfangen->wird das ausgefuehrt
 572:	1f 92       	push	r1
 574:	0f 92       	push	r0
 576:	0f b6       	in	r0, 0x3f	; 63
 578:	0f 92       	push	r0
 57a:	11 24       	eor	r1, r1
 57c:	8f 93       	push	r24
 57e:	9f 93       	push	r25
ISR (TIMER0_COMPA_vect) {
    timerCounter++;
}
unsigned char uart_getc() {
    /* Wait for data to be received */
    while (!(UCSR0A & (1<<RXC0))) {
 580:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 584:	87 ff       	sbrs	r24, 7
 586:	fc cf       	rjmp	.-8      	; 0x580 <__vector_20+0xe>
    }
    /* Get and return received data from buffer */
    return UDR0;
 588:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    if (intCounterPhaseB == 200) {
        intCounterPhaseB = 0;
    }*/
}
ISR(USART0_RX_vect) { //Wenn empfangen->wird das ausgefuehrt
    uartBuffer = uart_getc();
 58c:	80 93 12 06 	sts	0x0612, r24	; 0x800612 <uartBuffer>
    uartFlag = 1;
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	90 93 c9 05 	sts	0x05C9, r25	; 0x8005c9 <uartFlag+0x1>
 598:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <uartFlag>
    //received STRING EX. "1-0-100-099-098"
}
 59c:	9f 91       	pop	r25
 59e:	8f 91       	pop	r24
 5a0:	0f 90       	pop	r0
 5a2:	0f be       	out	0x3f, r0	; 63
 5a4:	0f 90       	pop	r0
 5a6:	1f 90       	pop	r1
 5a8:	18 95       	reti

000005aa <__vector_16>:
ISR (TIMER0_COMPA_vect) {
 5aa:	1f 92       	push	r1
 5ac:	0f 92       	push	r0
 5ae:	0f b6       	in	r0, 0x3f	; 63
 5b0:	0f 92       	push	r0
 5b2:	11 24       	eor	r1, r1
 5b4:	8f 93       	push	r24
 5b6:	9f 93       	push	r25
    timerCounter++;
 5b8:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <timerCounter>
 5bc:	90 91 cd 05 	lds	r25, 0x05CD	; 0x8005cd <timerCounter+0x1>
 5c0:	01 96       	adiw	r24, 0x01	; 1
 5c2:	90 93 cd 05 	sts	0x05CD, r25	; 0x8005cd <timerCounter+0x1>
 5c6:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <timerCounter>
}
 5ca:	9f 91       	pop	r25
 5cc:	8f 91       	pop	r24
 5ce:	0f 90       	pop	r0
 5d0:	0f be       	out	0x3f, r0	; 63
 5d2:	0f 90       	pop	r0
 5d4:	1f 90       	pop	r1
 5d6:	18 95       	reti

000005d8 <__divsf3>:
 5d8:	0e 94 00 03 	call	0x600	; 0x600 <__divsf3x>
 5dc:	0c 94 b2 03 	jmp	0x764	; 0x764 <__fp_round>
 5e0:	0e 94 ab 03 	call	0x756	; 0x756 <__fp_pscB>
 5e4:	58 f0       	brcs	.+22     	; 0x5fc <__divsf3+0x24>
 5e6:	0e 94 a4 03 	call	0x748	; 0x748 <__fp_pscA>
 5ea:	40 f0       	brcs	.+16     	; 0x5fc <__divsf3+0x24>
 5ec:	29 f4       	brne	.+10     	; 0x5f8 <__divsf3+0x20>
 5ee:	5f 3f       	cpi	r21, 0xFF	; 255
 5f0:	29 f0       	breq	.+10     	; 0x5fc <__divsf3+0x24>
 5f2:	0c 94 9b 03 	jmp	0x736	; 0x736 <__fp_inf>
 5f6:	51 11       	cpse	r21, r1
 5f8:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__fp_szero>
 5fc:	0c 94 a1 03 	jmp	0x742	; 0x742 <__fp_nan>

00000600 <__divsf3x>:
 600:	0e 94 c3 03 	call	0x786	; 0x786 <__fp_split3>
 604:	68 f3       	brcs	.-38     	; 0x5e0 <__divsf3+0x8>

00000606 <__divsf3_pse>:
 606:	99 23       	and	r25, r25
 608:	b1 f3       	breq	.-20     	; 0x5f6 <__divsf3+0x1e>
 60a:	55 23       	and	r21, r21
 60c:	91 f3       	breq	.-28     	; 0x5f2 <__divsf3+0x1a>
 60e:	95 1b       	sub	r25, r21
 610:	55 0b       	sbc	r21, r21
 612:	bb 27       	eor	r27, r27
 614:	aa 27       	eor	r26, r26
 616:	62 17       	cp	r22, r18
 618:	73 07       	cpc	r23, r19
 61a:	84 07       	cpc	r24, r20
 61c:	38 f0       	brcs	.+14     	; 0x62c <__divsf3_pse+0x26>
 61e:	9f 5f       	subi	r25, 0xFF	; 255
 620:	5f 4f       	sbci	r21, 0xFF	; 255
 622:	22 0f       	add	r18, r18
 624:	33 1f       	adc	r19, r19
 626:	44 1f       	adc	r20, r20
 628:	aa 1f       	adc	r26, r26
 62a:	a9 f3       	breq	.-22     	; 0x616 <__divsf3_pse+0x10>
 62c:	35 d0       	rcall	.+106    	; 0x698 <__divsf3_pse+0x92>
 62e:	0e 2e       	mov	r0, r30
 630:	3a f0       	brmi	.+14     	; 0x640 <__divsf3_pse+0x3a>
 632:	e0 e8       	ldi	r30, 0x80	; 128
 634:	32 d0       	rcall	.+100    	; 0x69a <__divsf3_pse+0x94>
 636:	91 50       	subi	r25, 0x01	; 1
 638:	50 40       	sbci	r21, 0x00	; 0
 63a:	e6 95       	lsr	r30
 63c:	00 1c       	adc	r0, r0
 63e:	ca f7       	brpl	.-14     	; 0x632 <__divsf3_pse+0x2c>
 640:	2b d0       	rcall	.+86     	; 0x698 <__divsf3_pse+0x92>
 642:	fe 2f       	mov	r31, r30
 644:	29 d0       	rcall	.+82     	; 0x698 <__divsf3_pse+0x92>
 646:	66 0f       	add	r22, r22
 648:	77 1f       	adc	r23, r23
 64a:	88 1f       	adc	r24, r24
 64c:	bb 1f       	adc	r27, r27
 64e:	26 17       	cp	r18, r22
 650:	37 07       	cpc	r19, r23
 652:	48 07       	cpc	r20, r24
 654:	ab 07       	cpc	r26, r27
 656:	b0 e8       	ldi	r27, 0x80	; 128
 658:	09 f0       	breq	.+2      	; 0x65c <__divsf3_pse+0x56>
 65a:	bb 0b       	sbc	r27, r27
 65c:	80 2d       	mov	r24, r0
 65e:	bf 01       	movw	r22, r30
 660:	ff 27       	eor	r31, r31
 662:	93 58       	subi	r25, 0x83	; 131
 664:	5f 4f       	sbci	r21, 0xFF	; 255
 666:	3a f0       	brmi	.+14     	; 0x676 <__divsf3_pse+0x70>
 668:	9e 3f       	cpi	r25, 0xFE	; 254
 66a:	51 05       	cpc	r21, r1
 66c:	78 f0       	brcs	.+30     	; 0x68c <__divsf3_pse+0x86>
 66e:	0c 94 9b 03 	jmp	0x736	; 0x736 <__fp_inf>
 672:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__fp_szero>
 676:	5f 3f       	cpi	r21, 0xFF	; 255
 678:	e4 f3       	brlt	.-8      	; 0x672 <__divsf3_pse+0x6c>
 67a:	98 3e       	cpi	r25, 0xE8	; 232
 67c:	d4 f3       	brlt	.-12     	; 0x672 <__divsf3_pse+0x6c>
 67e:	86 95       	lsr	r24
 680:	77 95       	ror	r23
 682:	67 95       	ror	r22
 684:	b7 95       	ror	r27
 686:	f7 95       	ror	r31
 688:	9f 5f       	subi	r25, 0xFF	; 255
 68a:	c9 f7       	brne	.-14     	; 0x67e <__divsf3_pse+0x78>
 68c:	88 0f       	add	r24, r24
 68e:	91 1d       	adc	r25, r1
 690:	96 95       	lsr	r25
 692:	87 95       	ror	r24
 694:	97 f9       	bld	r25, 7
 696:	08 95       	ret
 698:	e1 e0       	ldi	r30, 0x01	; 1
 69a:	66 0f       	add	r22, r22
 69c:	77 1f       	adc	r23, r23
 69e:	88 1f       	adc	r24, r24
 6a0:	bb 1f       	adc	r27, r27
 6a2:	62 17       	cp	r22, r18
 6a4:	73 07       	cpc	r23, r19
 6a6:	84 07       	cpc	r24, r20
 6a8:	ba 07       	cpc	r27, r26
 6aa:	20 f0       	brcs	.+8      	; 0x6b4 <__divsf3_pse+0xae>
 6ac:	62 1b       	sub	r22, r18
 6ae:	73 0b       	sbc	r23, r19
 6b0:	84 0b       	sbc	r24, r20
 6b2:	ba 0b       	sbc	r27, r26
 6b4:	ee 1f       	adc	r30, r30
 6b6:	88 f7       	brcc	.-30     	; 0x69a <__divsf3_pse+0x94>
 6b8:	e0 95       	com	r30
 6ba:	08 95       	ret

000006bc <__floatunsisf>:
 6bc:	e8 94       	clt
 6be:	09 c0       	rjmp	.+18     	; 0x6d2 <__floatsisf+0x12>

000006c0 <__floatsisf>:
 6c0:	97 fb       	bst	r25, 7
 6c2:	3e f4       	brtc	.+14     	; 0x6d2 <__floatsisf+0x12>
 6c4:	90 95       	com	r25
 6c6:	80 95       	com	r24
 6c8:	70 95       	com	r23
 6ca:	61 95       	neg	r22
 6cc:	7f 4f       	sbci	r23, 0xFF	; 255
 6ce:	8f 4f       	sbci	r24, 0xFF	; 255
 6d0:	9f 4f       	sbci	r25, 0xFF	; 255
 6d2:	99 23       	and	r25, r25
 6d4:	a9 f0       	breq	.+42     	; 0x700 <__floatsisf+0x40>
 6d6:	f9 2f       	mov	r31, r25
 6d8:	96 e9       	ldi	r25, 0x96	; 150
 6da:	bb 27       	eor	r27, r27
 6dc:	93 95       	inc	r25
 6de:	f6 95       	lsr	r31
 6e0:	87 95       	ror	r24
 6e2:	77 95       	ror	r23
 6e4:	67 95       	ror	r22
 6e6:	b7 95       	ror	r27
 6e8:	f1 11       	cpse	r31, r1
 6ea:	f8 cf       	rjmp	.-16     	; 0x6dc <__floatsisf+0x1c>
 6ec:	fa f4       	brpl	.+62     	; 0x72c <__floatsisf+0x6c>
 6ee:	bb 0f       	add	r27, r27
 6f0:	11 f4       	brne	.+4      	; 0x6f6 <__floatsisf+0x36>
 6f2:	60 ff       	sbrs	r22, 0
 6f4:	1b c0       	rjmp	.+54     	; 0x72c <__floatsisf+0x6c>
 6f6:	6f 5f       	subi	r22, 0xFF	; 255
 6f8:	7f 4f       	sbci	r23, 0xFF	; 255
 6fa:	8f 4f       	sbci	r24, 0xFF	; 255
 6fc:	9f 4f       	sbci	r25, 0xFF	; 255
 6fe:	16 c0       	rjmp	.+44     	; 0x72c <__floatsisf+0x6c>
 700:	88 23       	and	r24, r24
 702:	11 f0       	breq	.+4      	; 0x708 <__floatsisf+0x48>
 704:	96 e9       	ldi	r25, 0x96	; 150
 706:	11 c0       	rjmp	.+34     	; 0x72a <__floatsisf+0x6a>
 708:	77 23       	and	r23, r23
 70a:	21 f0       	breq	.+8      	; 0x714 <__floatsisf+0x54>
 70c:	9e e8       	ldi	r25, 0x8E	; 142
 70e:	87 2f       	mov	r24, r23
 710:	76 2f       	mov	r23, r22
 712:	05 c0       	rjmp	.+10     	; 0x71e <__floatsisf+0x5e>
 714:	66 23       	and	r22, r22
 716:	71 f0       	breq	.+28     	; 0x734 <__floatsisf+0x74>
 718:	96 e8       	ldi	r25, 0x86	; 134
 71a:	86 2f       	mov	r24, r22
 71c:	70 e0       	ldi	r23, 0x00	; 0
 71e:	60 e0       	ldi	r22, 0x00	; 0
 720:	2a f0       	brmi	.+10     	; 0x72c <__floatsisf+0x6c>
 722:	9a 95       	dec	r25
 724:	66 0f       	add	r22, r22
 726:	77 1f       	adc	r23, r23
 728:	88 1f       	adc	r24, r24
 72a:	da f7       	brpl	.-10     	; 0x722 <__floatsisf+0x62>
 72c:	88 0f       	add	r24, r24
 72e:	96 95       	lsr	r25
 730:	87 95       	ror	r24
 732:	97 f9       	bld	r25, 7
 734:	08 95       	ret

00000736 <__fp_inf>:
 736:	97 f9       	bld	r25, 7
 738:	9f 67       	ori	r25, 0x7F	; 127
 73a:	80 e8       	ldi	r24, 0x80	; 128
 73c:	70 e0       	ldi	r23, 0x00	; 0
 73e:	60 e0       	ldi	r22, 0x00	; 0
 740:	08 95       	ret

00000742 <__fp_nan>:
 742:	9f ef       	ldi	r25, 0xFF	; 255
 744:	80 ec       	ldi	r24, 0xC0	; 192
 746:	08 95       	ret

00000748 <__fp_pscA>:
 748:	00 24       	eor	r0, r0
 74a:	0a 94       	dec	r0
 74c:	16 16       	cp	r1, r22
 74e:	17 06       	cpc	r1, r23
 750:	18 06       	cpc	r1, r24
 752:	09 06       	cpc	r0, r25
 754:	08 95       	ret

00000756 <__fp_pscB>:
 756:	00 24       	eor	r0, r0
 758:	0a 94       	dec	r0
 75a:	12 16       	cp	r1, r18
 75c:	13 06       	cpc	r1, r19
 75e:	14 06       	cpc	r1, r20
 760:	05 06       	cpc	r0, r21
 762:	08 95       	ret

00000764 <__fp_round>:
 764:	09 2e       	mov	r0, r25
 766:	03 94       	inc	r0
 768:	00 0c       	add	r0, r0
 76a:	11 f4       	brne	.+4      	; 0x770 <__fp_round+0xc>
 76c:	88 23       	and	r24, r24
 76e:	52 f0       	brmi	.+20     	; 0x784 <__fp_round+0x20>
 770:	bb 0f       	add	r27, r27
 772:	40 f4       	brcc	.+16     	; 0x784 <__fp_round+0x20>
 774:	bf 2b       	or	r27, r31
 776:	11 f4       	brne	.+4      	; 0x77c <__fp_round+0x18>
 778:	60 ff       	sbrs	r22, 0
 77a:	04 c0       	rjmp	.+8      	; 0x784 <__fp_round+0x20>
 77c:	6f 5f       	subi	r22, 0xFF	; 255
 77e:	7f 4f       	sbci	r23, 0xFF	; 255
 780:	8f 4f       	sbci	r24, 0xFF	; 255
 782:	9f 4f       	sbci	r25, 0xFF	; 255
 784:	08 95       	ret

00000786 <__fp_split3>:
 786:	57 fd       	sbrc	r21, 7
 788:	90 58       	subi	r25, 0x80	; 128
 78a:	44 0f       	add	r20, r20
 78c:	55 1f       	adc	r21, r21
 78e:	59 f0       	breq	.+22     	; 0x7a6 <__fp_splitA+0x10>
 790:	5f 3f       	cpi	r21, 0xFF	; 255
 792:	71 f0       	breq	.+28     	; 0x7b0 <__fp_splitA+0x1a>
 794:	47 95       	ror	r20

00000796 <__fp_splitA>:
 796:	88 0f       	add	r24, r24
 798:	97 fb       	bst	r25, 7
 79a:	99 1f       	adc	r25, r25
 79c:	61 f0       	breq	.+24     	; 0x7b6 <__fp_splitA+0x20>
 79e:	9f 3f       	cpi	r25, 0xFF	; 255
 7a0:	79 f0       	breq	.+30     	; 0x7c0 <__fp_splitA+0x2a>
 7a2:	87 95       	ror	r24
 7a4:	08 95       	ret
 7a6:	12 16       	cp	r1, r18
 7a8:	13 06       	cpc	r1, r19
 7aa:	14 06       	cpc	r1, r20
 7ac:	55 1f       	adc	r21, r21
 7ae:	f2 cf       	rjmp	.-28     	; 0x794 <__fp_split3+0xe>
 7b0:	46 95       	lsr	r20
 7b2:	f1 df       	rcall	.-30     	; 0x796 <__fp_splitA>
 7b4:	08 c0       	rjmp	.+16     	; 0x7c6 <__fp_splitA+0x30>
 7b6:	16 16       	cp	r1, r22
 7b8:	17 06       	cpc	r1, r23
 7ba:	18 06       	cpc	r1, r24
 7bc:	99 1f       	adc	r25, r25
 7be:	f1 cf       	rjmp	.-30     	; 0x7a2 <__fp_splitA+0xc>
 7c0:	86 95       	lsr	r24
 7c2:	71 05       	cpc	r23, r1
 7c4:	61 05       	cpc	r22, r1
 7c6:	08 94       	sec
 7c8:	08 95       	ret

000007ca <__fp_zero>:
 7ca:	e8 94       	clt

000007cc <__fp_szero>:
 7cc:	bb 27       	eor	r27, r27
 7ce:	66 27       	eor	r22, r22
 7d0:	77 27       	eor	r23, r23
 7d2:	cb 01       	movw	r24, r22
 7d4:	97 f9       	bld	r25, 7
 7d6:	08 95       	ret

000007d8 <__gesf2>:
 7d8:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__fp_cmp>
 7dc:	08 f4       	brcc	.+2      	; 0x7e0 <__gesf2+0x8>
 7de:	8f ef       	ldi	r24, 0xFF	; 255
 7e0:	08 95       	ret

000007e2 <__mulsf3>:
 7e2:	0e 94 04 04 	call	0x808	; 0x808 <__mulsf3x>
 7e6:	0c 94 b2 03 	jmp	0x764	; 0x764 <__fp_round>
 7ea:	0e 94 a4 03 	call	0x748	; 0x748 <__fp_pscA>
 7ee:	38 f0       	brcs	.+14     	; 0x7fe <__mulsf3+0x1c>
 7f0:	0e 94 ab 03 	call	0x756	; 0x756 <__fp_pscB>
 7f4:	20 f0       	brcs	.+8      	; 0x7fe <__mulsf3+0x1c>
 7f6:	95 23       	and	r25, r21
 7f8:	11 f0       	breq	.+4      	; 0x7fe <__mulsf3+0x1c>
 7fa:	0c 94 9b 03 	jmp	0x736	; 0x736 <__fp_inf>
 7fe:	0c 94 a1 03 	jmp	0x742	; 0x742 <__fp_nan>
 802:	11 24       	eor	r1, r1
 804:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__fp_szero>

00000808 <__mulsf3x>:
 808:	0e 94 c3 03 	call	0x786	; 0x786 <__fp_split3>
 80c:	70 f3       	brcs	.-36     	; 0x7ea <__mulsf3+0x8>

0000080e <__mulsf3_pse>:
 80e:	95 9f       	mul	r25, r21
 810:	c1 f3       	breq	.-16     	; 0x802 <__mulsf3+0x20>
 812:	95 0f       	add	r25, r21
 814:	50 e0       	ldi	r21, 0x00	; 0
 816:	55 1f       	adc	r21, r21
 818:	62 9f       	mul	r22, r18
 81a:	f0 01       	movw	r30, r0
 81c:	72 9f       	mul	r23, r18
 81e:	bb 27       	eor	r27, r27
 820:	f0 0d       	add	r31, r0
 822:	b1 1d       	adc	r27, r1
 824:	63 9f       	mul	r22, r19
 826:	aa 27       	eor	r26, r26
 828:	f0 0d       	add	r31, r0
 82a:	b1 1d       	adc	r27, r1
 82c:	aa 1f       	adc	r26, r26
 82e:	64 9f       	mul	r22, r20
 830:	66 27       	eor	r22, r22
 832:	b0 0d       	add	r27, r0
 834:	a1 1d       	adc	r26, r1
 836:	66 1f       	adc	r22, r22
 838:	82 9f       	mul	r24, r18
 83a:	22 27       	eor	r18, r18
 83c:	b0 0d       	add	r27, r0
 83e:	a1 1d       	adc	r26, r1
 840:	62 1f       	adc	r22, r18
 842:	73 9f       	mul	r23, r19
 844:	b0 0d       	add	r27, r0
 846:	a1 1d       	adc	r26, r1
 848:	62 1f       	adc	r22, r18
 84a:	83 9f       	mul	r24, r19
 84c:	a0 0d       	add	r26, r0
 84e:	61 1d       	adc	r22, r1
 850:	22 1f       	adc	r18, r18
 852:	74 9f       	mul	r23, r20
 854:	33 27       	eor	r19, r19
 856:	a0 0d       	add	r26, r0
 858:	61 1d       	adc	r22, r1
 85a:	23 1f       	adc	r18, r19
 85c:	84 9f       	mul	r24, r20
 85e:	60 0d       	add	r22, r0
 860:	21 1d       	adc	r18, r1
 862:	82 2f       	mov	r24, r18
 864:	76 2f       	mov	r23, r22
 866:	6a 2f       	mov	r22, r26
 868:	11 24       	eor	r1, r1
 86a:	9f 57       	subi	r25, 0x7F	; 127
 86c:	50 40       	sbci	r21, 0x00	; 0
 86e:	9a f0       	brmi	.+38     	; 0x896 <__mulsf3_pse+0x88>
 870:	f1 f0       	breq	.+60     	; 0x8ae <__mulsf3_pse+0xa0>
 872:	88 23       	and	r24, r24
 874:	4a f0       	brmi	.+18     	; 0x888 <__mulsf3_pse+0x7a>
 876:	ee 0f       	add	r30, r30
 878:	ff 1f       	adc	r31, r31
 87a:	bb 1f       	adc	r27, r27
 87c:	66 1f       	adc	r22, r22
 87e:	77 1f       	adc	r23, r23
 880:	88 1f       	adc	r24, r24
 882:	91 50       	subi	r25, 0x01	; 1
 884:	50 40       	sbci	r21, 0x00	; 0
 886:	a9 f7       	brne	.-22     	; 0x872 <__mulsf3_pse+0x64>
 888:	9e 3f       	cpi	r25, 0xFE	; 254
 88a:	51 05       	cpc	r21, r1
 88c:	80 f0       	brcs	.+32     	; 0x8ae <__mulsf3_pse+0xa0>
 88e:	0c 94 9b 03 	jmp	0x736	; 0x736 <__fp_inf>
 892:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__fp_szero>
 896:	5f 3f       	cpi	r21, 0xFF	; 255
 898:	e4 f3       	brlt	.-8      	; 0x892 <__mulsf3_pse+0x84>
 89a:	98 3e       	cpi	r25, 0xE8	; 232
 89c:	d4 f3       	brlt	.-12     	; 0x892 <__mulsf3_pse+0x84>
 89e:	86 95       	lsr	r24
 8a0:	77 95       	ror	r23
 8a2:	67 95       	ror	r22
 8a4:	b7 95       	ror	r27
 8a6:	f7 95       	ror	r31
 8a8:	e7 95       	ror	r30
 8aa:	9f 5f       	subi	r25, 0xFF	; 255
 8ac:	c1 f7       	brne	.-16     	; 0x89e <__mulsf3_pse+0x90>
 8ae:	fe 2b       	or	r31, r30
 8b0:	88 0f       	add	r24, r24
 8b2:	91 1d       	adc	r25, r1
 8b4:	96 95       	lsr	r25
 8b6:	87 95       	ror	r24
 8b8:	97 f9       	bld	r25, 7
 8ba:	08 95       	ret

000008bc <__fp_cmp>:
 8bc:	99 0f       	add	r25, r25
 8be:	00 08       	sbc	r0, r0
 8c0:	55 0f       	add	r21, r21
 8c2:	aa 0b       	sbc	r26, r26
 8c4:	e0 e8       	ldi	r30, 0x80	; 128
 8c6:	fe ef       	ldi	r31, 0xFE	; 254
 8c8:	16 16       	cp	r1, r22
 8ca:	17 06       	cpc	r1, r23
 8cc:	e8 07       	cpc	r30, r24
 8ce:	f9 07       	cpc	r31, r25
 8d0:	c0 f0       	brcs	.+48     	; 0x902 <__fp_cmp+0x46>
 8d2:	12 16       	cp	r1, r18
 8d4:	13 06       	cpc	r1, r19
 8d6:	e4 07       	cpc	r30, r20
 8d8:	f5 07       	cpc	r31, r21
 8da:	98 f0       	brcs	.+38     	; 0x902 <__fp_cmp+0x46>
 8dc:	62 1b       	sub	r22, r18
 8de:	73 0b       	sbc	r23, r19
 8e0:	84 0b       	sbc	r24, r20
 8e2:	95 0b       	sbc	r25, r21
 8e4:	39 f4       	brne	.+14     	; 0x8f4 <__fp_cmp+0x38>
 8e6:	0a 26       	eor	r0, r26
 8e8:	61 f0       	breq	.+24     	; 0x902 <__fp_cmp+0x46>
 8ea:	23 2b       	or	r18, r19
 8ec:	24 2b       	or	r18, r20
 8ee:	25 2b       	or	r18, r21
 8f0:	21 f4       	brne	.+8      	; 0x8fa <__fp_cmp+0x3e>
 8f2:	08 95       	ret
 8f4:	0a 26       	eor	r0, r26
 8f6:	09 f4       	brne	.+2      	; 0x8fa <__fp_cmp+0x3e>
 8f8:	a1 40       	sbci	r26, 0x01	; 1
 8fa:	a6 95       	lsr	r26
 8fc:	8f ef       	ldi	r24, 0xFF	; 255
 8fe:	81 1d       	adc	r24, r1
 900:	81 1d       	adc	r24, r1
 902:	08 95       	ret

00000904 <__tablejump2__>:
 904:	ee 0f       	add	r30, r30
 906:	ff 1f       	adc	r31, r31
 908:	05 90       	lpm	r0, Z+
 90a:	f4 91       	lpm	r31, Z
 90c:	e0 2d       	mov	r30, r0
 90e:	09 94       	ijmp

00000910 <atoi>:
 910:	fc 01       	movw	r30, r24
 912:	88 27       	eor	r24, r24
 914:	99 27       	eor	r25, r25
 916:	e8 94       	clt
 918:	21 91       	ld	r18, Z+
 91a:	20 32       	cpi	r18, 0x20	; 32
 91c:	e9 f3       	breq	.-6      	; 0x918 <atoi+0x8>
 91e:	29 30       	cpi	r18, 0x09	; 9
 920:	10 f0       	brcs	.+4      	; 0x926 <atoi+0x16>
 922:	2e 30       	cpi	r18, 0x0E	; 14
 924:	c8 f3       	brcs	.-14     	; 0x918 <atoi+0x8>
 926:	2b 32       	cpi	r18, 0x2B	; 43
 928:	41 f0       	breq	.+16     	; 0x93a <atoi+0x2a>
 92a:	2d 32       	cpi	r18, 0x2D	; 45
 92c:	39 f4       	brne	.+14     	; 0x93c <atoi+0x2c>
 92e:	68 94       	set
 930:	04 c0       	rjmp	.+8      	; 0x93a <atoi+0x2a>
 932:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__mulhi_const_10>
 936:	82 0f       	add	r24, r18
 938:	91 1d       	adc	r25, r1
 93a:	21 91       	ld	r18, Z+
 93c:	20 53       	subi	r18, 0x30	; 48
 93e:	2a 30       	cpi	r18, 0x0A	; 10
 940:	c0 f3       	brcs	.-16     	; 0x932 <atoi+0x22>
 942:	1e f4       	brtc	.+6      	; 0x94a <atoi+0x3a>
 944:	90 95       	com	r25
 946:	81 95       	neg	r24
 948:	9f 4f       	sbci	r25, 0xFF	; 255
 94a:	08 95       	ret

0000094c <strtok>:
 94c:	46 ec       	ldi	r20, 0xC6	; 198
 94e:	55 e0       	ldi	r21, 0x05	; 5
 950:	0e 94 ab 04 	call	0x956	; 0x956 <strtok_r>
 954:	08 95       	ret

00000956 <strtok_r>:
 956:	fa 01       	movw	r30, r20
 958:	a1 91       	ld	r26, Z+
 95a:	b0 81       	ld	r27, Z
 95c:	00 97       	sbiw	r24, 0x00	; 0
 95e:	19 f4       	brne	.+6      	; 0x966 <strtok_r+0x10>
 960:	10 97       	sbiw	r26, 0x00	; 0
 962:	e1 f0       	breq	.+56     	; 0x99c <strtok_r+0x46>
 964:	cd 01       	movw	r24, r26
 966:	dc 01       	movw	r26, r24
 968:	cd 01       	movw	r24, r26
 96a:	0d 90       	ld	r0, X+
 96c:	00 20       	and	r0, r0
 96e:	11 f4       	brne	.+4      	; 0x974 <strtok_r+0x1e>
 970:	c0 01       	movw	r24, r0
 972:	13 c0       	rjmp	.+38     	; 0x99a <strtok_r+0x44>
 974:	fb 01       	movw	r30, r22
 976:	21 91       	ld	r18, Z+
 978:	22 23       	and	r18, r18
 97a:	19 f0       	breq	.+6      	; 0x982 <strtok_r+0x2c>
 97c:	20 15       	cp	r18, r0
 97e:	d9 f7       	brne	.-10     	; 0x976 <strtok_r+0x20>
 980:	f3 cf       	rjmp	.-26     	; 0x968 <strtok_r+0x12>
 982:	fb 01       	movw	r30, r22
 984:	21 91       	ld	r18, Z+
 986:	20 15       	cp	r18, r0
 988:	19 f4       	brne	.+6      	; 0x990 <strtok_r+0x3a>
 98a:	1e 92       	st	-X, r1
 98c:	11 96       	adiw	r26, 0x01	; 1
 98e:	06 c0       	rjmp	.+12     	; 0x99c <strtok_r+0x46>
 990:	22 23       	and	r18, r18
 992:	c1 f7       	brne	.-16     	; 0x984 <strtok_r+0x2e>
 994:	0d 90       	ld	r0, X+
 996:	00 20       	and	r0, r0
 998:	a1 f7       	brne	.-24     	; 0x982 <strtok_r+0x2c>
 99a:	d0 01       	movw	r26, r0
 99c:	fa 01       	movw	r30, r20
 99e:	a1 93       	st	Z+, r26
 9a0:	b0 83       	st	Z, r27
 9a2:	08 95       	ret

000009a4 <__mulhi_const_10>:
 9a4:	7a e0       	ldi	r23, 0x0A	; 10
 9a6:	97 9f       	mul	r25, r23
 9a8:	90 2d       	mov	r25, r0
 9aa:	87 9f       	mul	r24, r23
 9ac:	80 2d       	mov	r24, r0
 9ae:	91 0d       	add	r25, r1
 9b0:	11 24       	eor	r1, r1
 9b2:	08 95       	ret

000009b4 <_exit>:
 9b4:	f8 94       	cli

000009b6 <__stop_program>:
 9b6:	ff cf       	rjmp	.-2      	; 0x9b6 <__stop_program>
